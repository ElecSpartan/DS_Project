Index: CMakeLists.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>cmake_minimum_required(VERSION 3.23)\r\nproject(DS_Project)\r\n\r\nset(CMAKE_CXX_STANDARD 23)\r\n\r\nadd_executable(DS_Project\r\n        main.cpp\r\n        Graph.cpp\r\n        Post.cpp\r\n        User.cpp\r\n        XML_Parser.cpp\r\n        XML_Parser.h\r\n        Graph.h\r\n        User.h\r\n        Post.h\r\n        Error_detection_and_correction.h\r\n        Error_detection_and_correction.cpp\r\n        huffman.cpp\r\n        huffman.h)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/CMakeLists.txt b/CMakeLists.txt
--- a/CMakeLists.txt	(revision 5554f02274f37d827b51d90346ecc412b141a5a6)
+++ b/CMakeLists.txt	(date 1703796785738)
@@ -8,12 +8,8 @@
         Graph.cpp
         Post.cpp
         User.cpp
-        XML_Parser.cpp
-        XML_Parser.h
         Graph.h
         User.h
         Post.h
-        Error_detection_and_correction.h
-        Error_detection_and_correction.cpp
         huffman.cpp
         huffman.h)
Index: xmlParser.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#include \"xmlParser.h\"\r\n\r\n\r\nint xmlParser::getTagCount(std::string& input_string, std::string& tag_name, int start_index) {\r\n    std::string opening_tag = \"<\" + tag_name + \">\";\r\n    std::string closing_tag = \"</\" + tag_name + \">\";\r\n    std::string next_tag;\r\n    int next_same_opening_tag = 0, next_same_closing_tag = 0;\r\n    int next_different_opening_tag_start = 0, next_different_opening_tag_end = 0;\r\n    int count = 1, base = 0;\r\n    \r\n    while (1) {\r\n        next_same_opening_tag = input_string.find(opening_tag, start_index);\r\n        next_same_closing_tag = input_string.find(closing_tag, start_index);\r\n\r\n        if (next_same_opening_tag == -1) {\r\n            return count;\r\n        }\r\n\r\n        if (next_same_opening_tag < next_same_closing_tag) {\r\n            base++;\r\n        } else {\r\n            base--;\r\n        }\r\n\r\n        if (base == 0) {\r\n            next_different_opening_tag_start = input_string.find_first_of(\"<\", next_same_closing_tag + closing_tag.length());\r\n            if (next_different_opening_tag_start == -1) {\r\n                break;\r\n            }\r\n\r\n            next_different_opening_tag_end = input_string.find_first_of(\">\", next_different_opening_tag_start);\r\n            next_tag = input_string.substr(next_different_opening_tag_start, next_different_opening_tag_end - next_different_opening_tag_start + 1);\r\n            if (next_tag != opening_tag) {\r\n                break;\r\n            }\r\n\r\n            count++;\r\n        }\r\n\r\n        start_index = std::min(next_same_opening_tag , next_same_closing_tag) + 1;\r\n    }\r\n    return count;\r\n}\r\n\r\nvoid xmlParser::createTree(std::string& xml_input, Node* root) {\r\n    int i = 0, start;\r\n    while (i < xml_input.length()) {\r\n        if (xml_input[i] != '<') {\r\n            start = xml_input.find('<', i);\r\n            root->appendChild(new Node(xml_input.substr(i, start - i), root));\r\n            i = start;\r\n        }\r\n\r\n        if (xml_input[i + 1] == '/') {\r\n            root = root->getParent();\r\n            i = xml_input.find('>', i) + 1;\r\n            continue;\r\n        }\r\n\r\n        int end = xml_input.find('>', i);\r\n        std::string tag_name = xml_input.substr(i + 1, end - i - 1);\r\n        Node *node = new Node(tag_name, root);\r\n        root->appendChild(node);\r\n        root = node;\r\n        i = end + 1;\r\n    }\r\n}\r\n\r\nvoid xmlParser::createJsonFromTree(Node* root, std::string& json_output, int level, bool is_array) {\r\n    std::string indentation = \"    \", indent = \"\";\r\n    for (int i = 0; i < level; i++) indent += indentation;\r\n\r\n    int children_count = root->getChildren().size();\r\n\r\n    bool are_same_children = false;\r\n    if (children_count > 1 && root->getChildren()[0]->getName() == root->getChildren()[1]->getName()) {\r\n        are_same_children = true;\r\n    }\r\n\r\n    if (children_count == 0) {\r\n        int first_non_numeric_char = root->getName().find_first_not_of(\"0123456789\");\r\n        if (!root->getName().empty() && (first_non_numeric_char == -1 || (first_non_numeric_char == 0 && root->getName()[0] == '-'))) {\r\n            json_output += root->getName();\r\n            return;\r\n        }\r\n        json_output += '\"';\r\n        json_output += root->getName();\r\n        json_output += '\"';\r\n        return;\r\n    }\r\n\r\n    json_output += indent;\r\n\r\n    if (!is_array && root->getName() != \"\") {\r\n        json_output += '\"';\r\n        json_output += root->getName();\r\n        json_output += \"\\\": \";\r\n    }\r\n\r\n    if (root->getChildren()[0]->getChildren().size() != 0 && root->getName() != \"\") {\r\n        json_output += \"{\\n\";\r\n    }\r\n\r\n    if (are_same_children) {\r\n        json_output += indent;\r\n        json_output += indentation;\r\n        json_output += '\"';\r\n        json_output += root->getChildren()[0]->getName();\r\n        json_output += \"\\\": [\\n\";\r\n    }\r\n\r\n    for (int j = 0; j < children_count; j++) {\r\n        xmlParser::createJsonFromTree(root->getChildren()[j], json_output, level + 1 + are_same_children, are_same_children);\r\n        if (j < children_count - 1) {\r\n            json_output += \",\\n\";\r\n        }\r\n    }\r\n\r\n    if (are_same_children) {\r\n        json_output += '\\n';\r\n        json_output += indent;\r\n        json_output += indentation;\r\n        json_output += ']';\r\n    }\r\n\r\n    if (root->getChildren()[0]->getChildren().size() != 0 && root->getName() != \"\") {\r\n        json_output += '\\n';\r\n        json_output += indent;\r\n        json_output += '}';\r\n    }\r\n}\r\n\r\nstd::string xmlParser::minifyJson(std::string& json_input) {\r\n    std::string minified_json;\r\n    int i = 0;\r\n    bool text = false;\r\n\r\n    while (i < json_input.length()) {\r\n        if (json_input[i] == '\"') {\r\n            text = !text;\r\n        }\r\n        \r\n        if (text || (json_input[i] != ' ' && json_input[i] != '\\t' && json_input[i] != '\\n')) {\r\n            minified_json += json_input[i];\r\n        }\r\n\r\n        i++;\r\n    }\r\n\r\n    return minified_json;\r\n}\r\n\r\nstd::string xmlParser::verify(std::string& xml_input) {\r\n    return std::string();\r\n}\r\n\r\nstd::string xmlParser::correct(std::string& xml_input) {\r\n    return std::string();\r\n}\r\n\r\nstd::string xmlParser::minify(std::string& xml_input) {\r\n    std::string intermediate_string, minified_xml;\r\n    int i = xml_input.length()- 1;\r\n    bool text = false;\r\n\r\n    while (i >= 0) {\r\n        if (xml_input[i] == '<' && i != 0) {\r\n            intermediate_string += '<';\r\n\r\n            i = xml_input.find_last_not_of(\" \\n\\r\\t\", i - 1);\r\n\r\n            if (xml_input[i] != '>') {\r\n                text = true;\r\n            }\r\n        }\r\n\r\n        if (text && xml_input[i] == '>') {\r\n            text = false;\r\n        }\r\n        \r\n        if (text || (xml_input[i] != ' ' && xml_input[i] != '\\t' && xml_input[i] != '\\n')) {\r\n            intermediate_string += xml_input[i];\r\n        }\r\n\r\n        i--;\r\n    }\r\n\r\n    i = intermediate_string.length() - 1;\r\n\r\n    while (i >= 0) {\r\n        minified_xml += intermediate_string[i];\r\n\r\n        if (intermediate_string[i] == '>' && i != 0) {\r\n            i = intermediate_string.find_last_not_of(\" \\n\\r\\t\", i - 1) + 1;\r\n        }\r\n\r\n        i--;\r\n    }\r\n\r\n    return minified_xml;\r\n}\r\n\r\nstd::string xmlParser::prettify(std::string& xml_input) {\r\n    std::string prettified_xml = \"<\";\r\n    int i = xml_input.find('<') + 1, j;\r\n    int indentation_level = 0;\r\n    bool close_tag = false;\r\n\r\n    while(i < xml_input.length()) {\r\n\r\n        if (xml_input[i] == '<') {\r\n            int check_for_closing_tag = xml_input.find_first_not_of(\" \\n\\r\\t\", i + 1);\r\n            \r\n            if (xml_input[check_for_closing_tag] == '/') {\r\n                close_tag = true;\r\n                indentation_level--;\r\n            } else {\r\n                if (!close_tag) indentation_level++;\r\n                close_tag = false;\r\n            }\r\n\r\n            prettified_xml += \"\\n\";\r\n            for(int j = 0; j < indentation_level; j++) prettified_xml += \"    \";\r\n        }\r\n\r\n        int first_after_open_tag = xml_input.find_first_not_of(\" \\n\\r\\t\", i + 1);\r\n        if (first_after_open_tag == -1) {\r\n            prettified_xml += '>';\r\n            break;\r\n        }\r\n\r\n        if (xml_input[i] == '>' && xml_input[first_after_open_tag] != '<') {\r\n            indentation_level++;\r\n\r\n            prettified_xml += \">\\n\";\r\n            for(int j = 0; j < indentation_level; j++) prettified_xml += \"    \";\r\n\r\n            int closing_tag_start_index = xml_input.find_first_of('<', i + 1);\r\n            int data_end_index = xml_input.find_last_not_of(\" \\n\\r\\t\", closing_tag_start_index - 1);\r\n            prettified_xml += xml_input.substr(first_after_open_tag, data_end_index - first_after_open_tag + 1);\r\n            i = closing_tag_start_index;\r\n            continue;\r\n        }\r\n        \r\n        prettified_xml += xml_input[i];\r\n        i = first_after_open_tag - 1;\r\n        i++;\r\n    }\r\n\r\n    return prettified_xml;\r\n}\r\n\r\nstd::string xmlParser::toJsonByStrings(std::string& xml_input) {\r\n    int i = 0, j;\r\n    std::string json_output = \"\", indentation_type = \"    \";\r\n    int level = 0;\r\n    bool close_tag = false;\r\n    std::stack<std::string> tag_names;\r\n    std::stack<int> tag_count;\r\n\r\n    \r\n    while(i < xml_input.length()) {\r\n        if (xml_input[i] == '<') {\r\n            int check_for_closing_tag = xml_input.find_first_not_of(\" \\n\\r\\t\", i + 1);\r\n            int close_tag_index = xml_input.find('>', i + 1);\r\n            std::string indentation = \"\";\r\n\r\n            if (xml_input[check_for_closing_tag] == '/') {\r\n                level--;\r\n                std::string tag = xml_input.substr(check_for_closing_tag + 1, close_tag_index - check_for_closing_tag - 1);\r\n                for(int j = 0; j < level + tag_names.size(); j++) indentation += indentation_type;\r\n\r\n                if (close_tag) {\r\n                    json_output += '\\n';\r\n                    json_output += indentation;\r\n                    json_output += indentation_type;\r\n                    json_output += '}';\r\n                }\r\n                \r\n                if (!tag_names.empty() && (tag + std::to_string(level + 1)) == tag_names.top() && --tag_count.top() == 0) {\r\n                    tag_names.pop();\r\n                    tag_count.pop();\r\n                    json_output += '\\n';\r\n                    json_output += indentation;\r\n                    json_output += ']';\r\n                }\r\n\r\n                close_tag = true;\r\n                i = xml_input.find_first_of('<', i + 1); // bypass the closing tag\r\n                continue;\r\n            \r\n            } else {    // it must be an opening tag\r\n                level++;\r\n                std::string tag = xml_input.substr(i + 1, close_tag_index - i - 1);\r\n                for(int j = 0; j < level + tag_names.size(); j++) indentation += indentation_type;\r\n\r\n                int count = xmlParser::getTagCount(xml_input, tag, i);\r\n\r\n                if (!close_tag) {\r\n                    json_output += '{';\r\n                } else {\r\n                    json_output += \",\";\r\n                }\r\n                json_output += '\\n';\r\n                json_output += indentation;\r\n\r\n                close_tag = false;\r\n                i = close_tag_index;\r\n\r\n                if (!tag_names.empty() && (tag + std::to_string(level)) == tag_names.top()) {\r\n                    continue;\r\n                }\r\n\r\n                json_output += '\"';\r\n                json_output += tag;\r\n                json_output += \"\\\": \";\r\n\r\n                if (count != 1) {\r\n                    tag_names.push(tag + std::to_string(level));\r\n                    tag_count.push(count);\r\n                    json_output += \"[\\n\";\r\n                    json_output += indentation;\r\n                    json_output += indentation_type;\r\n                }\r\n\r\n                continue;\r\n            }\r\n        }\r\n\r\n        // check if text\r\n        int first_after_open_tag = xml_input.find_first_not_of(\" \\n\\r\\t\", i + 1);\r\n        if (xml_input[i] == '>' && xml_input[first_after_open_tag] != '<') {\r\n\r\n            int closing_tag_start_index = xml_input.find_first_of('<', i + 1);\r\n            int data_end_index = xml_input.find_last_not_of(\" \\n\\r\\t\", closing_tag_start_index - 1);\r\n            int first_non_numerical_char_index = xml_input.find_first_not_of(\"0123456789-. \\n\", first_after_open_tag);\r\n\r\n            if (first_non_numerical_char_index >= closing_tag_start_index) {\r\n                json_output += xml_input.substr(first_after_open_tag, data_end_index - first_after_open_tag + 1);\r\n            } else {\r\n                json_output += '\\\"';\r\n                json_output += xml_input.substr(first_after_open_tag, data_end_index - first_after_open_tag + 1);\r\n                json_output += '\\\"';\r\n            }\r\n\r\n            i = closing_tag_start_index;\r\n            continue;\r\n        }\r\n\r\n        i = first_after_open_tag;\r\n    }\r\n\r\n    json_output += \"\\n}\";\r\n    return json_output;\r\n}\r\n\r\nstd::string xmlParser::toJsonByTrees(std::string& xml_input) {\r\n    std::string minified_xml = xmlParser::minify(xml_input);\r\n\r\n    Node *root = new Node();\r\n    createTree(minified_xml, root);\r\n\r\n    std::string json_output = \"{\\n\";\r\n    xmlParser::createJsonFromTree(root, json_output, 0, false);\r\n    json_output += \"\\n}\";\r\n    return json_output;\r\n}\r\n\r\nstd::string xmlParser::compress(std::string& input) {\r\n    return std::string();\r\n}\r\n\r\nstd::string xmlParser::decompress(std::string& compressed_input) {\r\n    return std::string();\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/xmlParser.cpp b/xmlParser.cpp
--- a/xmlParser.cpp	(revision 5554f02274f37d827b51d90346ecc412b141a5a6)
+++ b/xmlParser.cpp	(date 1703796593100)
@@ -1,5 +1,5 @@
 #include "xmlParser.h"
-
+std::vector<std::pair<int,bool>>errors; // line, type ( 0 >> open , 1 >> closed )
 
 int xmlParser::getTagCount(std::string& input_string, std::string& tag_name, int start_index) {
     std::string opening_tag = "<" + tag_name + ">";
@@ -151,14 +151,268 @@
     return minified_json;
 }
 
-std::string xmlParser::verify(std::string& xml_input) {
-    return std::string();
+bool xmlParser::is_tag(std::string &s) {
+    return (s[0] == '<' && s[s.size() - 1] == '>');
 }
+
+bool xmlParser::is_open_tag(std::string &s) {
+    return (s[1] != '/') && is_tag(s);
+}
+
+bool xmlParser::is_closed_tag(std::string &s) {
+    return (s[1] == '/') && is_tag(s);
+}
+
+bool xmlParser::is_the_same(std::string &open,std::string &closed) {
+    int j = 0;
+    bool the_same = true;
+    for (int i = 0; i < closed.size(); i++) {
+        if (i == 1)
+            i++;
+
+        the_same = the_same && (closed[i] == open[j]);
+        j++;
+    }
+    return the_same;
+}
+
+std::string xmlParser::get_open_from_closed(std::string &s) {
+    std::string open = "<" + s.substr(2);
+    return open;
+}
+
+std::string xmlParser::get_closed_from_open(std::string &s) {
+    std::string closed = "</" + s.substr(1);
+    return closed;
+}
+
+std::string xmlParser::add_new_lines(std::vector<std::string>&file) {
+    std::string valid_file = "";
+
+    for (int i = 0; i < file.size(); i++) {
+        if (i == file.size() - 1) {
+            valid_file += file[i];
+            break;
+        }
+        if (is_open_tag(file[i]) && is_open_tag(file[i + 1])) {
+            valid_file += file[i];
+            valid_file += "\n";
+        } else if (is_closed_tag(file[i]) && is_closed_tag(file[i + 1])) {
+            valid_file += file[i];
+            valid_file += "\n";
+        } else if (is_closed_tag(file[i]) && is_open_tag(file[i + 1])) {
+            valid_file += file[i];
+            valid_file += "\n";
+        } else {
+            valid_file += file[i];
+        }
+    }
+    return valid_file;
+}
+
+int xmlParser::num_of_new_lines(std::string &x) {
+    int num = 0;
+    for (int i = 0; i < x.size(); i++) {
+        if (x[i] == '\n')
+            num++;
+    }
+    return num;
+}
+
+bool xmlParser::temp_is_dummy(std::string &temp) {
+    bool is_dummy = 1;
+    for (auto ch: temp)
+        is_dummy = is_dummy && (ch == '\n' || ch == ' ');
+
+
+    return is_dummy;
+}
+
+std::vector<std::string> xmlParser::values_correction(std::vector<std::string>&file) {
+    std::vector<std::string> v;
+
+    int line = 1;
+    int last;
+    for (int i = 0; i < file.size(); i++) {
+        last = line;
+        line += num_of_new_lines(file[i]);
+        if (!is_tag(file[i])) {
+            if (is_the_same(file[i - 1], file[i + 1]) || temp_is_dummy(file[i])) {
+                v.push_back(file[i]);
+                continue;
+            }
+
+            if (i == 1) {
+                v.push_back(get_open_from_closed(file[i + 1]));
+                v.push_back(file[i]);
+                errors.emplace_back(std::max(1, last - 1), false);
+            } else if (i == file.size() - 2) {
+                v.push_back(file[i]);
+                v.push_back(get_closed_from_open(file[i - 1]));
+                errors.emplace_back(std::max(1, line - 1), true);
+            } else {
+                if (is_open_tag(file[i - 1])) {
+                    v.push_back(file[i]);
+                    v.push_back(get_closed_from_open(file[i - 1]));
+                    errors.emplace_back(std::max(1, line - 1), true);
+                } else {
+                    v.push_back(get_open_from_closed(file[i + 1]));
+                    v.push_back(file[i]);
+                    errors.emplace_back(std::max(1, last - 1), false);
+                }
+            }
+        } else
+            v.push_back(file[i]);
+    }
+    return v;
+}
+
+std::pair<std::vector<std::string>,int> xmlParser::divide_string_for_correction(std::string &file) {
+    std::vector<std::string> divided_file;
+    std::string temp = "";
+    bool start = true;
+    int start_line = 1;
+    bool tag;
+    int index = 0;
+    bool first = true;
+    while (index < file.size()) {
+        if (start) {
+            if (file[index] == '<')
+                tag = true;
+            else
+                tag = false;
+
+            start = false;
+        }
+        temp += file[index];
+        if (tag) {
+            if (file[index] == '>') {
+                divided_file.push_back(temp);
+                temp = "";
+                start = true;
+                first = false;
+            }
+        } else {
+            if ((index == file.size() - 1 && !temp_is_dummy(temp)) || file[index + 1] == '<') {
+                {
+                    if (!(first && temp_is_dummy(temp)))
+                        divided_file.push_back(temp);
+                    else
+                        start_line += num_of_new_lines(temp);
+
+                    first = false;
+                }
+
+                temp = "";
+                start = true;
+            }
+        }
+        index++;
+    }
+    return {divided_file, start_line};
+}
+
+// butt
+std::string xmlParser::correct_xml(std::string &xml_file) {
+    std::pair<std::vector<std::string>, int> p = divide_string_for_correction(xml_file);
+    std::vector<std::string> file = p.first;
+    bool push_last_line = false;
+
+    bool must_push_opening = false;
+    if (file.size() >= 3)
+        must_push_opening = !is_tag(file[1]) && is_open_tag(file[2]) && !temp_is_dummy(file[1]);
+
+    if (!is_the_same(file[0], file[file.size() - 1])) {
+        if (is_open_tag(file[0]) && !must_push_opening) {
+            file.push_back(get_closed_from_open(file[0]));
+            push_last_line = true;
+        } else {
+            file.insert(file.begin(), get_open_from_closed(file[file.size() - 1]));
+            errors.emplace_back(1, false);
+        }
+    } else {
+        if (file.size() >= 3) {
+            if (!is_tag(file[1]) && is_open_tag(file[2]) && !temp_is_dummy(file[file.size() - 2])) {
+                file.insert(file.begin(), get_open_from_closed(file[file.size() - 1]));
+                errors.emplace_back(1, false);
+            } else if (!is_tag(file[file.size() - 2]) && is_closed_tag(file[file.size() - 3]) &&
+                       !temp_is_dummy(file[file.size() - 2])) {
+                file.push_back(get_closed_from_open(file[0]));
+                push_last_line = true;
+            }
+        }
+    }
+
+
+    std::vector<std::string> valid_file;
+    valid_file.push_back(file[0]);
+    file = values_correction(file);
+
+
+    std::stack<std::string> s;
+    int line = num_of_new_lines(valid_file[0]) + p.second;
+    int last;
+
+    for (int i = 1; i < file.size() - 1; i++) {
+        last = line;
+        line += num_of_new_lines(file[i]);
+
+        if (!is_tag(file[i])) {
+            valid_file.push_back(file[i]);
+            continue;
+        }
+
+        if (is_open_tag(file[i])) {
+            valid_file.push_back(file[i]);
+            s.push(file[i]);
+        } else {
+            if (!s.empty() && is_the_same(s.top(), file[i])) {
+                valid_file.push_back(file[i]);
+                s.pop();
+            } else {
+                valid_file.push_back(get_open_from_closed(file[i]));
+                valid_file.push_back(file[i]);
+                errors.emplace_back(last, false);
+            }
+        }
+    }
+
+
+    while (!s.empty()) {
+        valid_file.push_back(get_closed_from_open(s.top()));
+        errors.emplace_back(line, true);
+        s.pop();
+    }
 
-std::string xmlParser::correct(std::string& xml_input) {
-    return std::string();
-}
+    valid_file.push_back(file[file.size() - 1]);
+    if (push_last_line) {
+        errors.emplace_back(line, true);
+    }
 
+    return add_new_lines(valid_file);
+}
+
+// butt
+std::string xmlParser::get_errors(std::string &xml_file) {
+    errors.clear();
+    std::string s = correct_xml(xml_file);
+
+    std::string ans = "";
+    sort(errors.begin(), errors.end());
+    for (int i = 0; i < errors.size(); i++) {
+        ans += "Missing ";
+        if (errors[i].second)
+            ans += " Closing tag after line ";
+        else
+            ans += " Opening tag in line ";
+
+        ans += std::to_string(errors[i].first);
+        ans += '\n';
+    }
+    return ans;
+}
+
+// butt
 std::string xmlParser::minify(std::string& xml_input) {
     std::string intermediate_string, minified_xml;
     int i = xml_input.length()- 1;
@@ -201,6 +455,7 @@
     return minified_xml;
 }
 
+// butt
 std::string xmlParser::prettify(std::string& xml_input) {
     std::string prettified_xml = "<";
     int i = xml_input.find('<') + 1, j;
@@ -251,6 +506,7 @@
     return prettified_xml;
 }
 
+// butt
 std::string xmlParser::toJsonByStrings(std::string& xml_input) {
     int i = 0, j;
     std::string json_output = "", indentation_type = "    ";
@@ -355,11 +611,12 @@
     return json_output;
 }
 
+// butt
 std::string xmlParser::toJsonByTrees(std::string& xml_input) {
     std::string minified_xml = xmlParser::minify(xml_input);
 
     Node *root = new Node();
-    createTree(minified_xml, root);
+    xmlParser::createTree(minified_xml, root);
 
     std::string json_output = "{\n";
     xmlParser::createJsonFromTree(root, json_output, 0, false);
@@ -367,10 +624,12 @@
     return json_output;
 }
 
+// butt
 std::string xmlParser::compress(std::string& input) {
     return std::string();
 }
 
+// butt
 std::string xmlParser::decompress(std::string& compressed_input) {
     return std::string();
 }
Index: xmlParser.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#pragma once\r\n#include <iostream>\r\n#include <stack>\r\n#include \"Node.h\"\r\n\r\nclass xmlParser {\r\n    private:\r\n        static int getTagCount(std::string& input_string, std::string &tag_name, int start_index);\r\n        static void createTree(std::string& xml_input, Node* root);\r\n        static void createJsonFromTree(Node* root, std::string& json_output, int level, bool is_array);\r\n        static std::string minifyJson(std::string& xml_input);\r\n    public:\r\n        xmlParser() = delete;\r\n        static std::string verify(std::string& xml_input);\r\n        static std::string correct(std::string& xml_input);\r\n        static std::string minify(std::string& xml_input);\r\n        static std::string prettify(std::string& xml_input);\r\n        static std::string toJsonByStrings(std::string& xml_input);\r\n        static std::string toJsonByTrees(std::string& xml_input);\r\n        static std::string compress(std::string& input);\r\n        static std::string decompress(std::string& compressed_input);\r\n};\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/xmlParser.h b/xmlParser.h
--- a/xmlParser.h	(revision 5554f02274f37d827b51d90346ecc412b141a5a6)
+++ b/xmlParser.h	(date 1703796785768)
@@ -1,24 +1,59 @@
 #pragma once
 #include <iostream>
 #include <stack>
+#include <vector>
 #include "Node.h"
 
 class xmlParser {
-    private:
-        static int getTagCount(std::string& input_string, std::string &tag_name, int start_index);
-        static void createTree(std::string& xml_input, Node* root);
-        static void createJsonFromTree(Node* root, std::string& json_output, int level, bool is_array);
-        static std::string minifyJson(std::string& xml_input);
-    public:
-        xmlParser() = delete;
-        static std::string verify(std::string& xml_input);
-        static std::string correct(std::string& xml_input);
-        static std::string minify(std::string& xml_input);
-        static std::string prettify(std::string& xml_input);
-        static std::string toJsonByStrings(std::string& xml_input);
-        static std::string toJsonByTrees(std::string& xml_input);
-        static std::string compress(std::string& input);
-        static std::string decompress(std::string& compressed_input);
+private:
+    static int getTagCount(std::string &input_string, std::string &tag_name, int start_index);
+
+    static void createTree(std::string &xml_input, Node *root);
+
+    static void createJsonFromTree(Node *root, std::string &json_output, int level, bool is_array);
+
+    static std::string minifyJson(std::string &xml_input);
+
+    static int num_of_new_lines(std::string &x);
+
+    static bool temp_is_dummy(std::string &temp);
+
+    static bool is_open_tag(std::string &s);
+
+    static bool is_tag(std::string &s);
+
+    static bool is_the_same(std::string &open, std::string &closed);
+
+    static std::pair<std::vector<std::string>,int>  divide_string_for_correction(std::string &file);
+
+    static std::string get_open_from_closed(std::string &s);
+
+    static std::string get_closed_from_open(std::string &s);
+
+    static std::string add_new_lines(std::vector<std::string> &file);
+
+    static bool is_closed_tag(std::string &s);
+
+    static std::vector<std::string> values_correction(std::vector<std::string> &file);
+
+public:
+    xmlParser() = delete;
+
+    static std::string correct_xml(std::string &xml_file);
+
+    static std::string get_errors(std::string &xml_file);
+
+    static std::string minify(std::string& xml_input);
+
+    static std::string prettify(std::string &xml_input);
+
+    static std::string toJsonByStrings(std::string &xml_input);
+
+    static std::string toJsonByTrees(std::string &xml_input);
+
+    static std::string compress(std::string &input);
+
+    static std::string decompress(std::string &compressed_input);
 };
 
 
Index: XML_Parser.cpp
===================================================================
diff --git a/XML_Parser.cpp b/XML_Parser.cpp
deleted file mode 100644
--- a/XML_Parser.cpp	(revision 5554f02274f37d827b51d90346ecc412b141a5a6)
+++ /dev/null	(revision 5554f02274f37d827b51d90346ecc412b141a5a6)
@@ -1,236 +0,0 @@
-#include "XML_Parser.h"
-int num_of_new_lines(string &x) {
-    int num = 0;
-    for (int i = 0; i < x.size(); i++) {
-        if (x[i] == '\n')
-            num++;
-    }
-    return num;
-}
-void write_to_file(string address, string content) {
-    ofstream file(address);
-    if (file.is_open()) {
-        file << content;
-        file.close();
-    } else {
-        cerr << "Error: Unable to write to file" << std::endl;
-    }
-}
-string read_file(string address) {
-    ifstream file(address);
-    if (!file.is_open()) {
-        cerr << "Error: Unable to open file" << std::endl;
-        return "";
-    }
-    string initial_file;
-    string line;
-    while (getline(file, line)) {
-        initial_file += line + '\n';
-    }
-    file.close();
-    return initial_file;
-}
-bool temp_is_dummy(string &temp) {
-    bool is_dummy = 1;
-    for (auto ch: temp)
-        is_dummy = is_dummy && (ch == '\n' || ch == ' ');
-
-
-    return is_dummy;
-}
-string trim(string&x) {
-    string y = "";
-    int start = 0;
-    for (char c: x) {
-        if (c != '\n' && c != ' ')
-            break;
-
-        start++;
-    }
-    int end = x.size() - 1;
-    for (int i = x.size() - 1; i >= 0; i--) {
-        if (x[i] != '\n' && x[i] != ' ')
-            break;
-
-        end--;
-    }
-
-    for (int i = start; i <= end; i++) {
-        y += x[i];
-    }
-    return y;
-}
-vector<string> divide_string_for_graph(string &file) {
-    vector<string> divided_file;
-    string temp = "";
-    bool start = true;
-    bool tag;
-    int index = 0;
-    while (index < file.size()) {
-        if (start) {
-            if (file[index] == '<')
-                tag = true;
-            else
-                tag = false;
-
-            start = false;
-        }
-        temp += file[index];
-        if (tag) {
-            if (file[index] == '>') {
-                divided_file.push_back(temp);
-                temp = "";
-                start = true;
-            }
-        }
-        else {
-            if (file[index + 1] == '<') {
-                if (!temp_is_dummy(temp)) {
-                    divided_file.push_back(trim(temp));
-                }
-                temp = "";
-                start = true;
-            }
-        }
-        index++;
-    }
-    return divided_file;
-}
-pair<vector<string>,int> divide_string_for_correction(string &file) {
-    vector<string> divided_file;
-    string temp = "";
-    bool start = true;
-    int start_line = 1;
-    bool tag;
-    int index = 0;
-    bool first = true;
-    while (index < file.size()) {
-        if (start) {
-            if (file[index] == '<')
-                tag = true;
-            else
-                tag = false;
-
-            start = false;
-        }
-        temp += file[index];
-        if (tag) {
-            if (file[index] == '>') {
-                divided_file.push_back(temp);
-                temp = "";
-                start = true;
-                first = false;
-            }
-        } else {
-            if ((index == file.size() - 1 && !temp_is_dummy(temp)) || file[index + 1] == '<') {
-                {
-                    if (!(first && temp_is_dummy(temp)))
-                        divided_file.push_back(temp);
-                    else
-                        start_line += num_of_new_lines(temp);
-
-                    first = false;
-                }
-
-                temp = "";
-                start = true;
-            }
-        }
-        index++;
-    }
-    return {divided_file, start_line};
-}
-Graph parse(string &file) {
-    Graph g;
-    vector<string> divided_file = divide_string_for_graph(file);
-    User* obj_ptr;
-    Post* post_ptr;
-    vector<string> topics;
-    vector<Post> posts;
-    bool inside_followers = false;
-    for(int i=0;i<divided_file.size();i++){
-        string s = divided_file[i];
-        if(s=="<user>")
-            obj_ptr = new User;
-
-
-        if(s=="<id>") {
-            if (!inside_followers)
-                obj_ptr->set_user_id(stoi(divided_file[i + 1]));
-            else {
-                g.add_follower(obj_ptr->get_user_id(), stoi(divided_file[i + 1]));
-            }
-        }
-
-        if(s=="<name>")
-            obj_ptr->set_name(divided_file[i+1]);
-
-        if(s == "<followers>")
-            inside_followers = true;
-
-        if(s == "</followers>")
-            inside_followers = false;
-
-        if(s=="<post>"){
-            post_ptr = new Post;
-            if(divided_file[i+1]!="<body>")
-                post_ptr->set_body(divided_file[i+1]);
-        }
-
-        if(s=="<body>")
-            post_ptr->set_body(divided_file[i+1]);
-        if(s=="<topic>")
-            topics.push_back(divided_file[i+1]);
-
-
-        if(s=="</post>"){
-            posts.push_back(*post_ptr);
-            delete post_ptr;
-        }
-
-        if(s=="</topics>"){
-            post_ptr->set_topics(topics);
-            topics.clear();
-        }
-
-
-        if(s=="</posts>") {
-            obj_ptr->set_posts(posts);
-            posts.clear();
-        }
-
-        if(s=="</user>"){
-            g.add_user(obj_ptr->get_user_id(),*obj_ptr);
-            delete obj_ptr;
-        }
-    }
-    return g;
-}
-void visualize_graph(Graph &g) {
-    string s = "";
-    s += "digraph test{\n";
-
-    map<int, User> users = g.get_users();
-    map<int, vector<int>> followersOfUser = g.get_followersOfUsers();
-    for (auto x: users) {
-        s+= "\"";
-        s += x.second.get_name();
-        s+="\"";
-        s += "  ->  { ";
-        int num = 0;
-        for (auto id: followersOfUser[x.first]) {
-            s += "\"";
-            s += users[id].get_name();
-            s += "\"";
-            if (num != followersOfUser[x.first].size() - 1)
-                s += " ";
-
-            num++;
-        }
-        s += " }\n";
-    }
-
-    s += "\n}";
-    write_to_file("E:\\College\\Data structures\\Project\\DS_Project\\graph.dot", s);
-    system("cd .. && C:\\\"Program Files\"\\Graphviz\\bin\\dot -Tpng -O graph.dot");
-}
\ No newline at end of file
Index: XML_Parser.h
===================================================================
diff --git a/XML_Parser.h b/XML_Parser.h
deleted file mode 100644
--- a/XML_Parser.h	(revision 5554f02274f37d827b51d90346ecc412b141a5a6)
+++ /dev/null	(revision 5554f02274f37d827b51d90346ecc412b141a5a6)
@@ -1,15 +0,0 @@
-#ifndef DS_PROJECT_XML_PARSER_H
-#define DS_PROJECT_XML_PARSER_H
-#include "Graph.h"
-#include<fstream>
-#include<stack>
-int num_of_new_lines(string &x);
-void write_to_file(string address,string content);
-string read_file(string address);
-bool temp_is_dummy(string &temp);
-string trim(string&x);
-vector<string> divide_string_for_graph(string &file);
-pair<vector<string>,int>  divide_string_for_correction(string &file);
-Graph parse(string &file);
-void visualize_graph(Graph &g);
-#endif
Index: Error_detection_and_correction.h
===================================================================
diff --git a/Error_detection_and_correction.h b/Error_detection_and_correction.h
deleted file mode 100644
--- a/Error_detection_and_correction.h	(revision 5554f02274f37d827b51d90346ecc412b141a5a6)
+++ /dev/null	(revision 5554f02274f37d827b51d90346ecc412b141a5a6)
@@ -1,15 +0,0 @@
-#ifndef DS_PROJECT_ERROR_DETECTION_AND_CORRECTION_H
-#define DS_PROJECT_ERROR_DETECTION_AND_CORRECTION_H
-#include "XML_Parser.h"
-int num_of_new_lines(string &x);
-string correct_xml(string &xml_file);
-bool is_open_tag(string &s);
-bool is_tag(string &s);
-bool is_the_same(string &open,string &closed);
-string get_open_from_closed(string &s);
-string get_closed_from_open(string &s);
-string add_new_lines(vector<string>&file);
-bool is_closed_tag(string &s);
-vector<string> values_correction(vector<string>&file);
-vector<pair<int,bool>> get_errors(string &sml_file);
-#endif
Index: Error_detection_and_correction.cpp
===================================================================
diff --git a/Error_detection_and_correction.cpp b/Error_detection_and_correction.cpp
deleted file mode 100644
--- a/Error_detection_and_correction.cpp	(revision 5554f02274f37d827b51d90346ecc412b141a5a6)
+++ /dev/null	(revision 5554f02274f37d827b51d90346ecc412b141a5a6)
@@ -1,176 +0,0 @@
-#include "Error_detection_and_correction.h"
-vector<pair<int,bool>>errors; // line, type ( 0 >> open , 1 >> closed )
-bool is_tag(string &s) {
-    return (s[0] == '<' && s[s.size() - 1] == '>');
-}
-bool is_open_tag(string &s) {
-    return (s[1] != '/') && is_tag(s);
-}
-bool is_closed_tag(string &s) {
-    return (s[1] == '/') && is_tag(s);
-}
-bool is_the_same(string &open,string &closed) {
-    int j = 0;
-    bool the_same = true;
-    for (int i = 0; i < closed.size(); i++) {
-        if (i == 1)
-            i++;
-
-        the_same = the_same && (closed[i] == open[j]);
-        j++;
-    }
-    return the_same;
-}
-string get_open_from_closed(string &s) {
-    string open = "<" + s.substr(2);
-    return open;
-}
-string get_closed_from_open(string &s) {
-    string closed = "</" + s.substr(1);
-    return closed;
-}
-string add_new_lines(vector<string>&file) {
-    string valid_file = "";
-
-    for (int i = 0; i < file.size(); i++) {
-        if (i == file.size() - 1) {
-            valid_file += file[i];
-            break;
-        }
-        if (is_open_tag(file[i]) && is_open_tag(file[i + 1])) {
-            valid_file += file[i];
-            valid_file += "\n";
-        } else if (is_closed_tag(file[i]) && is_closed_tag(file[i + 1])) {
-            valid_file += file[i];
-            valid_file += "\n";
-        } else if (is_closed_tag(file[i]) && is_open_tag(file[i + 1])) {
-            valid_file += file[i];
-            valid_file += "\n";
-        } else {
-            valid_file += file[i];
-        }
-    }
-    return valid_file;
-}
-vector<string> values_correction(vector<string>&file) {
-    vector<string> v;
-
-    int line = 1;
-    int last;
-    for (int i = 0; i < file.size(); i++) {
-        last = line;
-        line += num_of_new_lines(file[i]);
-        if (!is_tag(file[i])) {
-            if (is_the_same(file[i - 1], file[i + 1]) || temp_is_dummy(file[i])) {
-                v.push_back(file[i]);
-                continue;
-            }
-
-            if (i == 1) {
-                v.push_back(get_open_from_closed(file[i + 1]));
-                v.push_back(file[i]);
-                errors.emplace_back(max(1, last - 1), false);
-            } else if (i == file.size() - 2) {
-                v.push_back(file[i]);
-                v.push_back(get_closed_from_open(file[i - 1]));
-                errors.emplace_back(max(1, line - 1), true);
-            } else {
-                if (is_open_tag(file[i - 1])) {
-                    v.push_back(file[i]);
-                    v.push_back(get_closed_from_open(file[i - 1]));
-                    errors.emplace_back(max(1, line - 1), true);
-                } else {
-                    v.push_back(get_open_from_closed(file[i + 1]));
-                    v.push_back(file[i]);
-                    errors.emplace_back(max(1, last - 1), false);
-                }
-            }
-        } else
-            v.push_back(file[i]);
-    }
-    return v;
-}
-string correct_xml(string &xml_file) {
-    pair<vector<string>, int> p = divide_string_for_correction(xml_file);
-    vector<string> file = p.first;
-    bool push_last_line = false;
-
-    bool must_push_opening = false;
-    if (file.size() >= 3)
-        must_push_opening = !is_tag(file[1]) && is_open_tag(file[2]) && !temp_is_dummy(file[1]);
-
-    if (!is_the_same(file[0], file[file.size() - 1])) {
-        if (is_open_tag(file[0]) && !must_push_opening) {
-            file.push_back(get_closed_from_open(file[0]));
-            push_last_line = true;
-        } else {
-            file.insert(file.begin(), get_open_from_closed(file[file.size() - 1]));
-            errors.emplace_back(1, false);
-        }
-    }
-    else {
-        if (file.size() >= 3) {
-            if (!is_tag(file[1]) && is_open_tag(file[2]) && !temp_is_dummy(file[file.size()-2])) {
-                file.insert(file.begin(), get_open_from_closed(file[file.size() - 1]));
-                errors.emplace_back(1, false);
-            } else if (!is_tag(file[file.size() - 2]) && is_closed_tag(file[file.size() - 3]) && !temp_is_dummy(file[file.size()-2])) {
-                file.push_back(get_closed_from_open(file[0]));
-                push_last_line = true;
-            }
-        }
-    }
-
-
-    vector<string> valid_file;
-    valid_file.push_back(file[0]);
-    file = values_correction(file);
-
-
-    stack<string> s;
-    int line = num_of_new_lines(valid_file[0]) + p.second;
-    int last;
-
-    for (int i = 1; i < file.size() - 1; i++) {
-        last = line;
-        line += num_of_new_lines(file[i]);
-
-        if (!is_tag(file[i])) {
-            valid_file.push_back(file[i]);
-            continue;
-        }
-
-        if (is_open_tag(file[i])) {
-            valid_file.push_back(file[i]);
-            s.push(file[i]);
-        } else {
-            if (!s.empty() && is_the_same(s.top(), file[i])) {
-                valid_file.push_back(file[i]);
-                s.pop();
-            } else {
-                valid_file.push_back(get_open_from_closed(file[i]));
-                valid_file.push_back(file[i]);
-                errors.emplace_back(last, false);
-            }
-        }
-    }
-
-
-    while (!s.empty()) {
-        valid_file.push_back(get_closed_from_open(s.top()));
-        errors.emplace_back(line, true);
-        s.pop();
-    }
-
-    valid_file.push_back(file[file.size() - 1]);
-    if (push_last_line) {
-        errors.emplace_back(line, true);
-    }
-
-    return add_new_lines(valid_file);
-}
-vector<pair<int,bool>> get_errors(string &xml_file) {
-    errors.clear();
-    string s = correct_xml(xml_file); // dummy
-    sort(errors.begin(), errors.end());
-    return errors;
-}
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"CMakePresetLoader\">{\r\n  &quot;useNewFormat&quot;: true\r\n}</component>\r\n  <component name=\"CMakeReloadState\">\r\n    <option name=\"reloaded\" value=\"true\" />\r\n  </component>\r\n  <component name=\"CMakeRunConfigurationManager\">\r\n    <generated>\r\n      <config projectName=\"DS_Project\" targetName=\"DS_Project\" />\r\n    </generated>\r\n  </component>\r\n  <component name=\"CMakeSettings\">\r\n    <configurations>\r\n      <configuration PROFILE_NAME=\"Debug\" ENABLED=\"true\" CONFIG_NAME=\"Debug\" />\r\n    </configurations>\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"cff5e52a-7082-4087-802e-8abf0b082d26\" name=\"Changes\" comment=\"&quot;Added compression code&quot;\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/cmake-build-debug/.ninja_deps\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/cmake-build-debug/.ninja_deps\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/cmake-build-debug/.ninja_log\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/cmake-build-debug/.ninja_log\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/cmake-build-debug/CMakeFiles/DS_Project.dir/huffman.cpp.obj\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/cmake-build-debug/CMakeFiles/DS_Project.dir/huffman.cpp.obj\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/cmake-build-debug/DS_Project.exe\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/cmake-build-debug/DS_Project.exe\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/cmake-build-debug/Testing/Temporary/LastTest.log\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/cmake-build-debug/Testing/Temporary/LastTest.log\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/huffman.cpp\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/huffman.cpp\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"ClangdSettings\">\r\n    <option name=\"formatViaClangd\" value=\"false\" />\r\n  </component>\r\n  <component name=\"ExecutionTargetManager\" SELECTED_TARGET=\"CMakeBuildProfile:Debug\" />\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectApplicationVersion\">\r\n    <option name=\"ide\" value=\"CLion\" />\r\n    <option name=\"majorVersion\" value=\"2022\" />\r\n    <option name=\"minorVersion\" value=\"2.1\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;customColor&quot;: &quot;&quot;,\r\n  &quot;associatedIndex&quot;: 1\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2ZLySC2oSUFIB8S5bIv8sJtfEpS\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"RunOnceActivity.cidr.known.project.marker\": \"true\",\r\n    \"WebServerToolWindowFactoryState\": \"false\",\r\n    \"cf.first.check.clang-format\": \"false\",\r\n    \"cidr.known.project.marker\": \"true\",\r\n    \"git-widget-placeholder\": \"main\",\r\n    \"last_opened_file_path\": \"E:/jj.txt\",\r\n    \"node.js.detected.package.eslint\": \"true\",\r\n    \"node.js.detected.package.tslint\": \"true\",\r\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\r\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\r\n    \"nodejs_package_manager_path\": \"npm\",\r\n    \"settings.editor.selected.configurable\": \"preferences.fileTypes\",\r\n    \"vue.rearranger.settings.migration\": \"true\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"DS_Project\" type=\"CMakeRunConfiguration\" factoryName=\"Application\" REDIRECT_INPUT=\"false\" ELEVATE=\"false\" USE_EXTERNAL_CONSOLE=\"false\" PASS_PARENT_ENVS_2=\"true\" PROJECT_NAME=\"DS_Project\" TARGET_NAME=\"DS_Project\" CONFIG_NAME=\"Debug\" RUN_TARGET_PROJECT_NAME=\"DS_Project\" RUN_TARGET_NAME=\"DS_Project\">\r\n      <method v=\"2\">\r\n        <option name=\"com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration default=\"true\" type=\"CMakeRunConfiguration\" factoryName=\"Application\" REDIRECT_INPUT=\"false\" ELEVATE=\"false\" USE_EXTERNAL_CONSOLE=\"false\" PASS_PARENT_ENVS_2=\"true\">\r\n      <method v=\"2\">\r\n        <option name=\"com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-python-sdk-67fca87a943a-c986f194a52a-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-233.11799.259\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"cff5e52a-7082-4087-802e-8abf0b082d26\" name=\"Changes\" comment=\"\" />\r\n      <created>1702215651113</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1702215651113</updated>\r\n      <workItem from=\"1702215653058\" duration=\"1242000\" />\r\n      <workItem from=\"1702225232080\" duration=\"851000\" />\r\n      <workItem from=\"1702228161471\" duration=\"1000\" />\r\n      <workItem from=\"1702234694888\" duration=\"1000\" />\r\n      <workItem from=\"1702235239884\" duration=\"12000\" />\r\n      <workItem from=\"1702249118101\" duration=\"749000\" />\r\n      <workItem from=\"1702294678661\" duration=\"13000\" />\r\n      <workItem from=\"1702304920333\" duration=\"2289000\" />\r\n      <workItem from=\"1702330228175\" duration=\"3000\" />\r\n      <workItem from=\"1702331437729\" duration=\"684000\" />\r\n      <workItem from=\"1702392559908\" duration=\"335000\" />\r\n      <workItem from=\"1702406969241\" duration=\"3694000\" />\r\n      <workItem from=\"1702410732658\" duration=\"1068000\" />\r\n      <workItem from=\"1702412175589\" duration=\"630000\" />\r\n      <workItem from=\"1702581624989\" duration=\"3000\" />\r\n      <workItem from=\"1702583558376\" duration=\"17000\" />\r\n      <workItem from=\"1702640386947\" duration=\"20337000\" />\r\n      <workItem from=\"1702666354710\" duration=\"821000\" />\r\n      <workItem from=\"1702670488833\" duration=\"5761000\" />\r\n      <workItem from=\"1702676597257\" duration=\"82000\" />\r\n      <workItem from=\"1702685391174\" duration=\"638000\" />\r\n      <workItem from=\"1702729777229\" duration=\"1380000\" />\r\n      <workItem from=\"1702932132707\" duration=\"1384000\" />\r\n      <workItem from=\"1702933892635\" duration=\"2309000\" />\r\n      <workItem from=\"1702996443970\" duration=\"16000\" />\r\n      <workItem from=\"1703684272523\" duration=\"85000\" />\r\n      <workItem from=\"1703684713124\" duration=\"667000\" />\r\n      <workItem from=\"1703685509200\" duration=\"26000\" />\r\n      <workItem from=\"1703726809754\" duration=\"5980000\" />\r\n      <workItem from=\"1703732939484\" duration=\"20000\" />\r\n      <workItem from=\"1703733145716\" duration=\"1483000\" />\r\n      <workItem from=\"1703734701881\" duration=\"56000\" />\r\n      <workItem from=\"1703763581002\" duration=\"5087000\" />\r\n      <workItem from=\"1703776255247\" duration=\"777000\" />\r\n      <workItem from=\"1703777053775\" duration=\"5728000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"&quot;Added cpp files&quot;\">\r\n      <created>1702216220857</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702216220857</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"&quot;Added cpp files&quot;\">\r\n      <created>1702216306269</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702216306269</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"&quot;Added some code for parsing&quot;\">\r\n      <created>1702306748582</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702306748582</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"&quot;Added some code for parsing&quot;\">\r\n      <created>1702307517102</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702307517102</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"&quot;Added some code for parsing&quot;\">\r\n      <created>1702392571846</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702392571846</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"&quot;Added some code for parsing&quot;\">\r\n      <created>1702392843903</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702392843903</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"&quot;Added some code for parsing&quot;\">\r\n      <created>1702409071652</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702409071652</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"&quot;Added some code for parsing&quot;\">\r\n      <created>1702409134602</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702409134602</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"&quot;Added some code for parsing&quot;\">\r\n      <created>1702409511624</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702409511624</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"&quot;Added some code for parsing&quot;\">\r\n      <created>1702410947207</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702410947207</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"&quot;Added some code for parsing&quot;\">\r\n      <created>1702410974928</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702410974928</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"&quot;Added some code for parsing&quot;\">\r\n      <created>1702412207176</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702412207176</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"&quot;Added some code for parsing&quot;\">\r\n      <created>1702640401477</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702640401477</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"&quot;Added code for correction&quot;\">\r\n      <created>1702644089876</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702644089876</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"&quot;Added code for correction&quot;\">\r\n      <created>1702644198438</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702644198438</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"&quot;Added code for correction&quot;\">\r\n      <created>1702644440425</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702644440425</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"&quot;Added code for correction&quot;\">\r\n      <created>1702644456104</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702644456104</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"&quot;Added code for correction&quot;\">\r\n      <created>1702649587591</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702649587591</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"&quot;Added code for correction&quot;\">\r\n      <created>1702649765382</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702649765382</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"&quot;Added code for correction&quot;\">\r\n      <created>1702651499809</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702651499809</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00021\" summary=\"&quot;Added code for correction&quot;\">\r\n      <created>1702652845612</created>\r\n      <option name=\"number\" value=\"00021\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702652845612</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00022\" summary=\"&quot;Added code for correction&quot;\">\r\n      <created>1702657854827</created>\r\n      <option name=\"number\" value=\"00022\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702657854827</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00023\" summary=\"&quot;Added code for correction&quot;\">\r\n      <created>1702658269576</created>\r\n      <option name=\"number\" value=\"00023\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00023\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702658269576</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00024\" summary=\"&quot;Added code for correction&quot;\">\r\n      <created>1702658633287</created>\r\n      <option name=\"number\" value=\"00024\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00024\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702658633287</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00025\" summary=\"&quot;Added code for correction&quot;\">\r\n      <created>1702663044739</created>\r\n      <option name=\"number\" value=\"00025\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00025\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702663044739</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00026\" summary=\"&quot;Added code for correction&quot;\">\r\n      <created>1702667171978</created>\r\n      <option name=\"number\" value=\"00026\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00026\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702667171978</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00027\" summary=\"&quot;Added code for correction&quot;\">\r\n      <created>1702674145389</created>\r\n      <option name=\"number\" value=\"00027\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00027\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702674145389</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00028\" summary=\"&quot;Added code for correction&quot;\">\r\n      <created>1702675131554</created>\r\n      <option name=\"number\" value=\"00028\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00028\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702675131554</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00029\" summary=\"&quot;Added code for correction&quot;\">\r\n      <created>1702675534161</created>\r\n      <option name=\"number\" value=\"00029\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00029\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702675534161</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00030\" summary=\"&quot;Added code for correction&quot;\">\r\n      <created>1702676266597</created>\r\n      <option name=\"number\" value=\"00030\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00030\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702676266597</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00031\" summary=\"&quot;Added code for correction&quot;\">\r\n      <created>1702676661730</created>\r\n      <option name=\"number\" value=\"00031\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00031\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702676661730</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00032\" summary=\"&quot;Added code for correction&quot;\">\r\n      <created>1703684305974</created>\r\n      <option name=\"number\" value=\"00032\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00032\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1703684305974</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00033\" summary=\"&quot;Added code for correction&quot;\">\r\n      <created>1703684316442</created>\r\n      <option name=\"number\" value=\"00033\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00033\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1703684316442</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00034\" summary=\"&quot;Added code for correction&quot;\">\r\n      <created>1703685298985</created>\r\n      <option name=\"number\" value=\"00034\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00034\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1703685298985</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00035\" summary=\"&quot;Added code for correction&quot;\">\r\n      <created>1703732526199</created>\r\n      <option name=\"number\" value=\"00035\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00035\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1703732526199</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00036\" summary=\"&quot;Added code for correction&quot;\">\r\n      <created>1703732602658</created>\r\n      <option name=\"number\" value=\"00036\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00036\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1703732602658</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00037\" summary=\"&quot;Added code for correction&quot;\">\r\n      <created>1703732812812</created>\r\n      <option name=\"number\" value=\"00037\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00037\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1703732812812</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00038\" summary=\"&quot;Added code for correction&quot;\">\r\n      <created>1703734627402</created>\r\n      <option name=\"number\" value=\"00038\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00038\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1703734627402</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00039\" summary=\"&quot;Added code for correction&quot;\">\r\n      <created>1703773741451</created>\r\n      <option name=\"number\" value=\"00039\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00039\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1703773741451</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00040\" summary=\"&quot;Added code for correction&quot;\">\r\n      <created>1703774026294</created>\r\n      <option name=\"number\" value=\"00040\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00040\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1703774026294</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00041\" summary=\"&quot;Added code for correction&quot;\">\r\n      <created>1703777006231</created>\r\n      <option name=\"number\" value=\"00041\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00041\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1703777006232</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00042\" summary=\"&quot;Added compression code&quot;\">\r\n      <created>1703777023944</created>\r\n      <option name=\"number\" value=\"00042\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00042\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1703777023944</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00043\" summary=\"&quot;Added compression code&quot;\">\r\n      <created>1703777324332</created>\r\n      <option name=\"number\" value=\"00043\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00043\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1703777324332</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00044\" summary=\"&quot;Added compression code&quot;\">\r\n      <created>1703779311670</created>\r\n      <option name=\"number\" value=\"00044\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00044\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1703779311670</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00045\" summary=\"&quot;Added compression code&quot;\">\r\n      <created>1703787848701</created>\r\n      <option name=\"number\" value=\"00045\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00045\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1703787848701</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"46\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"&quot;Added cpp files&quot;\" />\r\n    <MESSAGE value=\"&quot;Added some code for parsing&quot;\" />\r\n    <MESSAGE value=\"&quot;Added code for correction&quot;\" />\r\n    <MESSAGE value=\"&quot;Added compression code&quot;\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"&quot;Added compression code&quot;\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 5554f02274f37d827b51d90346ecc412b141a5a6)
+++ b/.idea/workspace.xml	(date 1703796593218)
@@ -22,12 +22,9 @@
   <component name="ChangeListManager">
     <list default="true" id="cff5e52a-7082-4087-802e-8abf0b082d26" name="Changes" comment="&quot;Added compression code&quot;">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/cmake-build-debug/.ninja_deps" beforeDir="false" afterPath="$PROJECT_DIR$/cmake-build-debug/.ninja_deps" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/cmake-build-debug/.ninja_log" beforeDir="false" afterPath="$PROJECT_DIR$/cmake-build-debug/.ninja_log" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/DS_Project.dir/huffman.cpp.obj" beforeDir="false" afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/DS_Project.dir/huffman.cpp.obj" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/cmake-build-debug/DS_Project.exe" beforeDir="false" afterPath="$PROJECT_DIR$/cmake-build-debug/DS_Project.exe" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/cmake-build-debug/Testing/Temporary/LastTest.log" beforeDir="false" afterPath="$PROJECT_DIR$/cmake-build-debug/Testing/Temporary/LastTest.log" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/huffman.cpp" beforeDir="false" afterPath="$PROJECT_DIR$/huffman.cpp" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/xmlParser.cpp" beforeDir="false" afterPath="$PROJECT_DIR$/xmlParser.cpp" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/xmlParser.h" beforeDir="false" afterPath="$PROJECT_DIR$/xmlParser.h" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -67,7 +64,7 @@
     "cf.first.check.clang-format": "false",
     "cidr.known.project.marker": "true",
     "git-widget-placeholder": "main",
-    "last_opened_file_path": "E:/jj.txt",
+    "last_opened_file_path": "E:/College/Data structures/Project/DS_Project",
     "node.js.detected.package.eslint": "true",
     "node.js.detected.package.tslint": "true",
     "node.js.selected.package.eslint": "(autodetect)",
@@ -79,11 +76,6 @@
 }]]></component>
   <component name="RunManager">
     <configuration name="DS_Project" type="CMakeRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" ELEVATE="false" USE_EXTERNAL_CONSOLE="false" PASS_PARENT_ENVS_2="true" PROJECT_NAME="DS_Project" TARGET_NAME="DS_Project" CONFIG_NAME="Debug" RUN_TARGET_PROJECT_NAME="DS_Project" RUN_TARGET_NAME="DS_Project">
-      <method v="2">
-        <option name="com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask" enabled="true" />
-      </method>
-    </configuration>
-    <configuration default="true" type="CMakeRunConfiguration" factoryName="Application" REDIRECT_INPUT="false" ELEVATE="false" USE_EXTERNAL_CONSOLE="false" PASS_PARENT_ENVS_2="true">
       <method v="2">
         <option name="com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask" enabled="true" />
       </method>
@@ -139,6 +131,8 @@
       <workItem from="1703763581002" duration="5087000" />
       <workItem from="1703776255247" duration="777000" />
       <workItem from="1703777053775" duration="5728000" />
+      <workItem from="1703791457048" duration="12000" />
+      <workItem from="1703794687847" duration="1880000" />
     </task>
     <task id="LOCAL-00001" summary="&quot;Added cpp files&quot;">
       <created>1702216220857</created>
Index: cmake-build-debug/Testing/Temporary/LastTest.log
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>Start testing: Dec 28 20:54 Egypt Standard Time\r\n----------------------------------------------------------\r\nEnd testing: Dec 28 20:54 Egypt Standard Time\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/cmake-build-debug/Testing/Temporary/LastTest.log b/cmake-build-debug/Testing/Temporary/LastTest.log
--- a/cmake-build-debug/Testing/Temporary/LastTest.log	(revision 5554f02274f37d827b51d90346ecc412b141a5a6)
+++ b/cmake-build-debug/Testing/Temporary/LastTest.log	(date 1703794686938)
@@ -1,3 +1,3 @@
-Start testing: Dec 28 20:54 Egypt Standard Time
+Start testing: Dec 28 21:24 Egypt Standard Time
 ----------------------------------------------------------
-End testing: Dec 28 20:54 Egypt Standard Time
+End testing: Dec 28 21:24 Egypt Standard Time
