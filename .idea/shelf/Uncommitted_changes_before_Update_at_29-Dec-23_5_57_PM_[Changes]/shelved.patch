Index: xmlParser.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#include \"xmlParser.h\"\r\n\r\n// lesa el huff-man\r\n\r\nstd::vector<std::pair<int,bool>>errors; // line, type ( 0 >> open , 1 >> closed )\r\nstd::stack<std::pair<int,std::string>> undo_stack; // 0 >> input , 1 >> Result , 2 >> nothing\r\nstd::stack<std::pair<int,std::string>> redo_stack; // 0 >> input , 1 >> Result , 2 >> nothing\r\n\r\nint xmlParser::getTagCount(std::string& input_string, std::string& tag_name, int start_index) {\r\n    std::string opening_tag = \"<\" + tag_name + \">\";\r\n    std::string closing_tag = \"</\" + tag_name + \">\";\r\n    std::string next_tag;\r\n    int next_same_opening_tag = 0, next_same_closing_tag = 0;\r\n    int next_different_opening_tag_start = 0, next_different_opening_tag_end = 0;\r\n    int count = 1, base = 0;\r\n    \r\n    while (1) {\r\n        next_same_opening_tag = input_string.find(opening_tag, start_index);\r\n        next_same_closing_tag = input_string.find(closing_tag, start_index);\r\n\r\n        if (next_same_opening_tag == -1) {\r\n            return count;\r\n        }\r\n\r\n        if (next_same_opening_tag < next_same_closing_tag) {\r\n            base++;\r\n        } else {\r\n            base--;\r\n        }\r\n\r\n        if (base == 0) {\r\n            next_different_opening_tag_start = input_string.find_first_of(\"<\", next_same_closing_tag + closing_tag.length());\r\n            if (next_different_opening_tag_start == -1) {\r\n                break;\r\n            }\r\n\r\n            next_different_opening_tag_end = input_string.find_first_of(\">\", next_different_opening_tag_start);\r\n            next_tag = input_string.substr(next_different_opening_tag_start, next_different_opening_tag_end - next_different_opening_tag_start + 1);\r\n            if (next_tag != opening_tag) {\r\n                break;\r\n            }\r\n\r\n            count++;\r\n        }\r\n\r\n        start_index = std::min(next_same_opening_tag , next_same_closing_tag) + 1;\r\n    }\r\n    return count;\r\n}\r\n\r\nvoid xmlParser::createTree(std::string& xml_input, Node* root) {\r\n    int i = 0, start;\r\n    while (i < xml_input.length()) {\r\n        if (xml_input[i] != '<') {\r\n            start = xml_input.find('<', i);\r\n            root->appendChild(new Node(xml_input.substr(i, start - i), root));\r\n            i = start;\r\n        }\r\n\r\n        if (xml_input[i + 1] == '/') {\r\n            root = root->getParent();\r\n            i = xml_input.find('>', i) + 1;\r\n            continue;\r\n        }\r\n\r\n        int end = xml_input.find('>', i);\r\n        std::string tag_name = xml_input.substr(i + 1, end - i - 1);\r\n        Node *node = new Node(tag_name, root);\r\n        root->appendChild(node);\r\n        root = node;\r\n        i = end + 1;\r\n    }\r\n}\r\n\r\nvoid xmlParser::createJsonFromTree(Node* root, std::string& json_output, int level, bool is_array) {\r\n    std::string indentation = \"    \", indent = \"\";\r\n    for (int i = 0; i < level; i++) indent += indentation;\r\n\r\n    int children_count = root->getChildren().size();\r\n\r\n    bool are_same_children = false;\r\n    if (children_count > 1 && root->getChildren()[0]->getName() == root->getChildren()[1]->getName()) {\r\n        are_same_children = true;\r\n    }\r\n\r\n    if (children_count == 0) {\r\n        int first_non_numeric_char = root->getName().find_first_not_of(\"0123456789\");\r\n        if (!root->getName().empty() && (first_non_numeric_char == -1 || (first_non_numeric_char == 0 && root->getName()[0] == '-'))) {\r\n            json_output += root->getName();\r\n            return;\r\n        }\r\n        json_output += '\"';\r\n        json_output += root->getName();\r\n        json_output += '\"';\r\n        return;\r\n    }\r\n\r\n    json_output += indent;\r\n\r\n    if (!is_array && root->getName() != \"\") {\r\n        json_output += '\"';\r\n        json_output += root->getName();\r\n        json_output += \"\\\": \";\r\n    }\r\n\r\n    if (root->getChildren()[0]->getChildren().size() != 0 && root->getName() != \"\") {\r\n        json_output += \"{\\n\";\r\n    }\r\n\r\n    if (are_same_children) {\r\n        json_output += indent;\r\n        json_output += indentation;\r\n        json_output += '\"';\r\n        json_output += root->getChildren()[0]->getName();\r\n        json_output += \"\\\": [\\n\";\r\n    }\r\n\r\n    for (int j = 0; j < children_count; j++) {\r\n        xmlParser::createJsonFromTree(root->getChildren()[j], json_output, level + 1 + are_same_children, are_same_children);\r\n        if (j < children_count - 1) {\r\n            json_output += \",\\n\";\r\n        }\r\n    }\r\n\r\n    if (are_same_children) {\r\n        json_output += '\\n';\r\n        json_output += indent;\r\n        json_output += indentation;\r\n        json_output += ']';\r\n    }\r\n\r\n    if (root->getChildren()[0]->getChildren().size() != 0 && root->getName() != \"\") {\r\n        json_output += '\\n';\r\n        json_output += indent;\r\n        json_output += '}';\r\n    }\r\n}\r\n\r\nstd::string xmlParser::minifyJson(std::string& json_input) {\r\n    std::string minified_json;\r\n    int i = 0;\r\n    bool text = false;\r\n\r\n    while (i < json_input.length()) {\r\n        if (json_input[i] == '\"') {\r\n            text = !text;\r\n        }\r\n        \r\n        if (text || (json_input[i] != ' ' && json_input[i] != '\\t' && json_input[i] != '\\n')) {\r\n            minified_json += json_input[i];\r\n        }\r\n\r\n        i++;\r\n    }\r\n\r\n    return minified_json;\r\n}\r\n\r\nbool xmlParser::is_tag(std::string &s) {\r\n    return (s[0] == '<' && s[s.size() - 1] == '>');\r\n}\r\n\r\nbool xmlParser::is_open_tag(std::string &s) {\r\n    return (s[1] != '/') && is_tag(s);\r\n}\r\n\r\nbool xmlParser::is_closed_tag(std::string &s) {\r\n    return (s[1] == '/') && is_tag(s);\r\n}\r\n\r\nbool xmlParser::is_the_same(std::string &open,std::string &closed) {\r\n    int j = 0;\r\n    bool the_same = true;\r\n    for (int i = 0; i < closed.size(); i++) {\r\n        if (i == 1)\r\n            i++;\r\n\r\n        the_same = the_same && (closed[i] == open[j]);\r\n        j++;\r\n    }\r\n    return the_same;\r\n}\r\n\r\nstd::string xmlParser::get_open_from_closed(std::string &s) {\r\n    std::string open = \"<\" + s.substr(2);\r\n    return open;\r\n}\r\n\r\nstd::string xmlParser::get_closed_from_open(std::string &s) {\r\n    std::string closed = \"</\" + s.substr(1);\r\n    return closed;\r\n}\r\n\r\nstd::string xmlParser::add_new_lines(std::vector<std::string>&file) {\r\n    std::string valid_file = \"\";\r\n\r\n    for (int i = 0; i < file.size(); i++) {\r\n        if (i == file.size() - 1) {\r\n            valid_file += file[i];\r\n            break;\r\n        }\r\n        if (is_open_tag(file[i]) && is_open_tag(file[i + 1])) {\r\n            valid_file += file[i];\r\n            valid_file += \"\\n\";\r\n        } else if (is_closed_tag(file[i]) && is_closed_tag(file[i + 1])) {\r\n            valid_file += file[i];\r\n            valid_file += \"\\n\";\r\n        } else if (is_closed_tag(file[i]) && is_open_tag(file[i + 1])) {\r\n            valid_file += file[i];\r\n            valid_file += \"\\n\";\r\n        } else {\r\n            valid_file += file[i];\r\n        }\r\n    }\r\n    return valid_file;\r\n}\r\n\r\nint xmlParser::num_of_new_lines(std::string &x) {\r\n    int num = 0;\r\n    for (int i = 0; i < x.size(); i++) {\r\n        if (x[i] == '\\n')\r\n            num++;\r\n    }\r\n    return num;\r\n}\r\n\r\nbool xmlParser::temp_is_dummy(std::string &temp) {\r\n    bool is_dummy = 1;\r\n    for (auto ch: temp)\r\n        is_dummy = is_dummy && (ch == '\\n' || ch == ' ');\r\n\r\n\r\n    return is_dummy;\r\n}\r\n\r\nstd::vector<std::string> xmlParser::values_correction(std::vector<std::string>&file) {\r\n    std::vector<std::string> v;\r\n\r\n    int line = 1;\r\n    int last;\r\n    for (int i = 0; i < file.size(); i++) {\r\n        last = line;\r\n        line += num_of_new_lines(file[i]);\r\n        if (!is_tag(file[i])) {\r\n            if (is_the_same(file[i - 1], file[i + 1]) || temp_is_dummy(file[i])) {\r\n                v.push_back(file[i]);\r\n                continue;\r\n            }\r\n\r\n            if (i == 1) {\r\n                v.push_back(get_open_from_closed(file[i + 1]));\r\n                v.push_back(file[i]);\r\n                errors.emplace_back(std::max(1, last - 1), false);\r\n            } else if (i == file.size() - 2) {\r\n                v.push_back(file[i]);\r\n                v.push_back(get_closed_from_open(file[i - 1]));\r\n                errors.emplace_back(std::max(1, line - 1), true);\r\n            } else {\r\n                if (is_open_tag(file[i - 1])) {\r\n                    v.push_back(file[i]);\r\n                    v.push_back(get_closed_from_open(file[i - 1]));\r\n                    errors.emplace_back(std::max(1, line - 1), true);\r\n                } else {\r\n                    v.push_back(get_open_from_closed(file[i + 1]));\r\n                    v.push_back(file[i]);\r\n                    errors.emplace_back(std::max(1, last - 1), false);\r\n                }\r\n            }\r\n        } else\r\n            v.push_back(file[i]);\r\n    }\r\n    return v;\r\n}\r\n\r\nstd::pair<std::vector<std::string>,int> xmlParser::divide_string_for_correction(std::string &file) {\r\n    std::vector<std::string> divided_file;\r\n    std::string temp = \"\";\r\n    bool start = true;\r\n    int start_line = 1;\r\n    bool tag;\r\n    int index = 0;\r\n    bool first = true;\r\n    while (index < file.size()) {\r\n        if (start) {\r\n            if (file[index] == '<')\r\n                tag = true;\r\n            else\r\n                tag = false;\r\n\r\n            start = false;\r\n        }\r\n        temp += file[index];\r\n        if (tag) {\r\n            if (file[index] == '>') {\r\n                divided_file.push_back(temp);\r\n                temp = \"\";\r\n                start = true;\r\n                first = false;\r\n            }\r\n        } else {\r\n            if ((index == file.size() - 1 && !temp_is_dummy(temp)) || file[index + 1] == '<') {\r\n                {\r\n                    if (!(first && temp_is_dummy(temp)))\r\n                        divided_file.push_back(temp);\r\n                    else\r\n                        start_line += num_of_new_lines(temp);\r\n\r\n                    first = false;\r\n                }\r\n\r\n                temp = \"\";\r\n                start = true;\r\n            }\r\n        }\r\n        index++;\r\n    }\r\n    return {divided_file, start_line};\r\n}\r\n\r\n\r\nHuffmanNode::HuffmanNode(int data, int freq) : data(data), frequency(freq), left(nullptr), right(nullptr) {}\r\n\r\nbool CompareNodes::operator()(const HuffmanNode* a, const HuffmanNode* b) const {\r\n    return a->frequency > b->frequency;\r\n}\r\n\r\nHuffmanNode* xmlParser::buildHuffmanTree(std::map<char, int>& frequencies) {\r\n    HuffmanPriorityQueue pq;\r\n\r\n    for (auto& pair : frequencies) {\r\n        pq.push(new HuffmanNode(pair.first, pair.second));\r\n    }\r\n\r\n    while (pq.size() > 1) {\r\n        HuffmanNode* left = pq.top();\r\n        pq.pop();\r\n        HuffmanNode* right = pq.top();\r\n        pq.pop();\r\n\r\n        HuffmanNode* newNode = new HuffmanNode(0, left->frequency + right->frequency);\r\n        newNode->left = left;\r\n        newNode->right = right;\r\n\r\n        pq.push(newNode);\r\n    }\r\n    return pq.top();\r\n}\r\n\r\nvoid xmlParser::HuffmanTree_to_file(HuffmanNode* root, std::ofstream& outFile) {\r\n    if (!root)\r\n        return;\r\n\r\n    if (root->left || root->right) {\r\n        outFile.put('\\1');  // Non-leaf node marker\r\n        outFile.write(reinterpret_cast<const char*>(&root->data), sizeof(char));\r\n        outFile.write(reinterpret_cast<const char*>(&root->frequency), sizeof(int));\r\n\r\n        HuffmanTree_to_file(root->left, outFile);\r\n        HuffmanTree_to_file(root->right, outFile);\r\n    }\r\n    else {\r\n        outFile.put('\\0');  // Leaf node marker\r\n        outFile.write(reinterpret_cast<const char*>(&root->data), sizeof(char));\r\n    }\r\n}\r\n\r\nHuffmanNode* xmlParser::file_to_HuffmanTree(std::ifstream& inFile) {\r\n    char marker;\r\n    inFile.get(marker);\r\n\r\n    if (marker == '\\1') {\r\n        int value, frequency;\r\n        inFile.read(reinterpret_cast<char*>(&value), sizeof(char));\r\n        inFile.read(reinterpret_cast<char*>(&frequency), sizeof(int));\r\n\r\n        HuffmanNode* newNode = new HuffmanNode(value, frequency);\r\n        newNode->left = file_to_HuffmanTree(inFile);\r\n        newNode->right = file_to_HuffmanTree(inFile);\r\n\r\n        return newNode;\r\n    }\r\n    else if (marker == '\\0') {\r\n        int value;\r\n        inFile.read(reinterpret_cast<char*>(&value), sizeof(char));\r\n\r\n        return new HuffmanNode(value, 0);\r\n    }\r\n    else {\r\n        // Handle error or unexpected marker\r\n        return nullptr;\r\n    }\r\n}\r\n\r\nvoid xmlParser::HuffmanCodes(HuffmanNode* root, const std::string& code, std::map<char, std::string>& codes) {\r\n    if (!root)\r\n        return;\r\n\r\n    if (!root->left && !root->right) {\r\n        codes[root->data] = code;\r\n        return;\r\n    }\r\n\r\n    HuffmanCodes(root->left, code + \"0\", codes);\r\n    HuffmanCodes(root->right, code + \"1\", codes);\r\n}\r\n\r\nstd::map<char, int> xmlParser::calculateFrequencies(const std::string& in) {\r\n    std::map<char, int> frequencies;\r\n    for (char c: in) {\r\n        frequencies[c]++;\r\n    }\r\n    return frequencies;\r\n}\r\n\r\n\r\nstd::string xmlParser::correct_xml(std::string &xml_file) {\r\n    std::pair<std::vector<std::string>, int> p = divide_string_for_correction(xml_file);\r\n    std::vector<std::string> file = p.first;\r\n    bool push_last_line = false;\r\n\r\n    bool must_push_opening = false;\r\n    if (file.size() >= 3)\r\n        must_push_opening = !is_tag(file[1]) && is_open_tag(file[2]) && !temp_is_dummy(file[1]);\r\n\r\n    if (!is_the_same(file[0], file[file.size() - 1])) {\r\n        if (is_open_tag(file[0]) && !must_push_opening) {\r\n            file.push_back(get_closed_from_open(file[0]));\r\n            push_last_line = true;\r\n        } else {\r\n            file.insert(file.begin(), get_open_from_closed(file[file.size() - 1]));\r\n            errors.emplace_back(1, false);\r\n        }\r\n    } else {\r\n        if (file.size() >= 3) {\r\n            if (!is_tag(file[1]) && is_open_tag(file[2]) && !temp_is_dummy(file[file.size() - 2])) {\r\n                file.insert(file.begin(), get_open_from_closed(file[file.size() - 1]));\r\n                errors.emplace_back(1, false);\r\n            } else if (!is_tag(file[file.size() - 2]) && is_closed_tag(file[file.size() - 3]) &&\r\n                       !temp_is_dummy(file[file.size() - 2])) {\r\n                file.push_back(get_closed_from_open(file[0]));\r\n                push_last_line = true;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    std::vector<std::string> valid_file;\r\n    valid_file.push_back(file[0]);\r\n    file = values_correction(file);\r\n\r\n\r\n    std::stack<std::string> s;\r\n    int line = num_of_new_lines(valid_file[0]) + p.second;\r\n    int last;\r\n\r\n    for (int i = 1; i < file.size() - 1; i++) {\r\n        last = line;\r\n        line += num_of_new_lines(file[i]);\r\n\r\n        if (!is_tag(file[i])) {\r\n            valid_file.push_back(file[i]);\r\n            continue;\r\n        }\r\n\r\n        if (is_open_tag(file[i])) {\r\n            valid_file.push_back(file[i]);\r\n            s.push(file[i]);\r\n        } else {\r\n            if (!s.empty() && is_the_same(s.top(), file[i])) {\r\n                valid_file.push_back(file[i]);\r\n                s.pop();\r\n            } else {\r\n                valid_file.push_back(get_open_from_closed(file[i]));\r\n                valid_file.push_back(file[i]);\r\n                errors.emplace_back(last, false);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    while (!s.empty()) {\r\n        valid_file.push_back(get_closed_from_open(s.top()));\r\n        errors.emplace_back(line, true);\r\n        s.pop();\r\n    }\r\n\r\n    valid_file.push_back(file[file.size() - 1]);\r\n    if (push_last_line) {\r\n        errors.emplace_back(line, true);\r\n    }\r\n\r\n    return add_new_lines(valid_file);\r\n}\r\n\r\n\r\nstd::string xmlParser::get_errors(std::string &xml_file) {\r\n    errors.clear();\r\n    std::string s = correct_xml(xml_file);\r\n\r\n    std::string ans = \"\";\r\n    std::sort(errors.begin(), errors.end());\r\n    for (int i = 0; i < errors.size(); i++) {\r\n        ans += \"Missing \";\r\n        if (errors[i].second)\r\n            ans += \" Closing tag after line \";\r\n        else\r\n            ans += \" Opening tag in line \";\r\n\r\n        ans += std::to_string(errors[i].first);\r\n        ans += '\\n';\r\n    }\r\n    return ans;\r\n}\r\n\r\n\r\nstd::string xmlParser::minify(std::string& xml_input) {\r\n    std::string intermediate_string, minified_xml;\r\n    int i = xml_input.length()- 1;\r\n    bool text = false;\r\n\r\n    while (i >= 0) {\r\n        if (xml_input[i] == '<' && i != 0) {\r\n            intermediate_string += '<';\r\n\r\n            i = xml_input.find_last_not_of(\" \\n\\r\\t\", i - 1);\r\n\r\n            if (xml_input[i] != '>') {\r\n                text = true;\r\n            }\r\n        }\r\n\r\n        if (text && xml_input[i] == '>') {\r\n            text = false;\r\n        }\r\n        \r\n        if (text || (xml_input[i] != ' ' && xml_input[i] != '\\t' && xml_input[i] != '\\n')) {\r\n            intermediate_string += xml_input[i];\r\n        }\r\n\r\n        i--;\r\n    }\r\n\r\n    i = intermediate_string.length() - 1;\r\n\r\n    while (i >= 0) {\r\n        minified_xml += intermediate_string[i];\r\n\r\n        if (intermediate_string[i] == '>' && i != 0) {\r\n            i = intermediate_string.find_last_not_of(\" \\n\\r\\t\", i - 1) + 1;\r\n        }\r\n\r\n        i--;\r\n    }\r\n\r\n    return minified_xml;\r\n}\r\n\r\n\r\nstd::string xmlParser::prettify(std::string& xml_input) {\r\n    std::string prettified_xml = \"<\";\r\n    int i = xml_input.find('<') + 1, j;\r\n    int indentation_level = 0;\r\n    bool close_tag = false;\r\n\r\n    while(i < xml_input.length()) {\r\n\r\n        if (xml_input[i] == '<') {\r\n            int check_for_closing_tag = xml_input.find_first_not_of(\" \\n\\r\\t\", i + 1);\r\n            \r\n            if (xml_input[check_for_closing_tag] == '/') {\r\n                close_tag = true;\r\n                indentation_level--;\r\n            } else {\r\n                if (!close_tag) indentation_level++;\r\n                close_tag = false;\r\n            }\r\n\r\n            prettified_xml += \"\\n\";\r\n            for(int j = 0; j < indentation_level; j++) prettified_xml += \"    \";\r\n        }\r\n\r\n        int first_after_open_tag = xml_input.find_first_not_of(\" \\n\\r\\t\", i + 1);\r\n        if (first_after_open_tag == -1) {\r\n            prettified_xml += '>';\r\n            break;\r\n        }\r\n\r\n        if (xml_input[i] == '>' && xml_input[first_after_open_tag] != '<') {\r\n            indentation_level++;\r\n\r\n            prettified_xml += \">\\n\";\r\n            for(int j = 0; j < indentation_level; j++) prettified_xml += \"    \";\r\n\r\n            int closing_tag_start_index = xml_input.find_first_of('<', i + 1);\r\n            int data_end_index = xml_input.find_last_not_of(\" \\n\\r\\t\", closing_tag_start_index - 1);\r\n            prettified_xml += xml_input.substr(first_after_open_tag, data_end_index - first_after_open_tag + 1);\r\n            i = closing_tag_start_index;\r\n            continue;\r\n        }\r\n        \r\n        prettified_xml += xml_input[i];\r\n        i = first_after_open_tag - 1;\r\n        i++;\r\n    }\r\n\r\n    return prettified_xml;\r\n}\r\n\r\n\r\nstd::string xmlParser::toJsonByStrings(std::string& xml_input) {\r\n    int i = 0, j;\r\n    std::string json_output = \"\", indentation_type = \"    \";\r\n    int level = 0;\r\n    bool close_tag = false;\r\n    std::stack<std::string> tag_names;\r\n    std::stack<int> tag_count;\r\n\r\n    \r\n    while(i < xml_input.length()) {\r\n        if (xml_input[i] == '<') {\r\n            int check_for_closing_tag = xml_input.find_first_not_of(\" \\n\\r\\t\", i + 1);\r\n            int close_tag_index = xml_input.find('>', i + 1);\r\n            std::string indentation = \"\";\r\n\r\n            if (xml_input[check_for_closing_tag] == '/') {\r\n                level--;\r\n                std::string tag = xml_input.substr(check_for_closing_tag + 1, close_tag_index - check_for_closing_tag - 1);\r\n                for(int j = 0; j < level + tag_names.size(); j++) indentation += indentation_type;\r\n\r\n                if (close_tag) {\r\n                    json_output += '\\n';\r\n                    json_output += indentation;\r\n                    json_output += indentation_type;\r\n                    json_output += '}';\r\n                }\r\n                \r\n                if (!tag_names.empty() && (tag + std::to_string(level + 1)) == tag_names.top() && --tag_count.top() == 0) {\r\n                    tag_names.pop();\r\n                    tag_count.pop();\r\n                    json_output += '\\n';\r\n                    json_output += indentation;\r\n                    json_output += ']';\r\n                }\r\n\r\n                close_tag = true;\r\n                i = xml_input.find_first_of('<', i + 1); // bypass the closing tag\r\n                continue;\r\n            \r\n            } else {    // it must be an opening tag\r\n                level++;\r\n                std::string tag = xml_input.substr(i + 1, close_tag_index - i - 1);\r\n                for(int j = 0; j < level + tag_names.size(); j++) indentation += indentation_type;\r\n\r\n                int count = xmlParser::getTagCount(xml_input, tag, i);\r\n\r\n                if (!close_tag) {\r\n                    json_output += '{';\r\n                } else {\r\n                    json_output += \",\";\r\n                }\r\n                json_output += '\\n';\r\n                json_output += indentation;\r\n\r\n                close_tag = false;\r\n                i = close_tag_index;\r\n\r\n                if (!tag_names.empty() && (tag + std::to_string(level)) == tag_names.top()) {\r\n                    continue;\r\n                }\r\n\r\n                json_output += '\"';\r\n                json_output += tag;\r\n                json_output += \"\\\": \";\r\n\r\n                if (count != 1) {\r\n                    tag_names.push(tag + std::to_string(level));\r\n                    tag_count.push(count);\r\n                    json_output += \"[\\n\";\r\n                    json_output += indentation;\r\n                    json_output += indentation_type;\r\n                }\r\n\r\n                continue;\r\n            }\r\n        }\r\n\r\n        // check if text\r\n        int first_after_open_tag = xml_input.find_first_not_of(\" \\n\\r\\t\", i + 1);\r\n        if (xml_input[i] == '>' && xml_input[first_after_open_tag] != '<') {\r\n\r\n            int closing_tag_start_index = xml_input.find_first_of('<', i + 1);\r\n            int data_end_index = xml_input.find_last_not_of(\" \\n\\r\\t\", closing_tag_start_index - 1);\r\n            int first_non_numerical_char_index = xml_input.find_first_not_of(\"0123456789-. \\n\", first_after_open_tag);\r\n\r\n            if (first_non_numerical_char_index >= closing_tag_start_index) {\r\n                json_output += xml_input.substr(first_after_open_tag, data_end_index - first_after_open_tag + 1);\r\n            } else {\r\n                json_output += '\\\"';\r\n                json_output += xml_input.substr(first_after_open_tag, data_end_index - first_after_open_tag + 1);\r\n                json_output += '\\\"';\r\n            }\r\n\r\n            i = closing_tag_start_index;\r\n            continue;\r\n        }\r\n\r\n        i = first_after_open_tag;\r\n    }\r\n\r\n    json_output += \"\\n}\";\r\n    return json_output;\r\n}\r\n\r\n\r\nstd::string xmlParser::toJsonByTrees(std::string& xml_input) {\r\n    std::string minified_xml = xmlParser::minify(xml_input);\r\n\r\n    Node *root = new Node();\r\n    xmlParser::createTree(minified_xml, root);\r\n\r\n    std::string json_output = \"{\\n\";\r\n    xmlParser::createJsonFromTree(root, json_output, 0, false);\r\n    json_output += \"\\n}\";\r\n    return json_output;\r\n}\r\n\r\n\r\nstd::string xmlParser::compress(std::string& in) {\r\n    std::map<char, int> frequencies = xmlParser::calculateFrequencies(in);\r\n    HuffmanNode *root = buildHuffmanTree(frequencies);\r\n\r\n    std::filesystem::path currentPath = std::filesystem::current_path();\r\n    std::filesystem::path filePath = currentPath / \"compressed_file.bin\";\r\n\r\n    std::ofstream compressed_file; //amgad\r\n    compressed_file.open(filePath,std::ios::out);\r\n\r\n\r\n    // Serialize Huffman tree to compressed file\r\n    HuffmanTree_to_file(root, compressed_file);\r\n\r\n    // Compress input and write to file\r\n    std::map<char, std::string> codes;\r\n    HuffmanCodes(root, \"\", codes);\r\n\r\n    std::string compressed;\r\n    for (char c: in) {\r\n        compressed += codes[c];\r\n    }\r\n\r\n    // Convert the binary string to bytes and write to the compressed file\r\n    std::bitset<8> bits;\r\n    for (int i = 0; i < compressed.size(); ++i) {\r\n        bits[7 - (i % 8)] = compressed[i] == '1';\r\n        if (i % 8 == 7 || i == compressed.size() - 1) {\r\n            char byte = static_cast<char>(bits.to_ulong());\r\n            compressed_file.write(&byte, sizeof(char));\r\n        }\r\n    }\r\n\r\n    compressed_file.close();\r\n    return compressed;\r\n}\r\n\r\n\r\nstd::string xmlParser::decompress(const std::string& compressedFilePath) {\r\n    std::ifstream compressedFile(compressedFilePath, std::ios::binary);\r\n    HuffmanNode *root;\r\n    // Deserialize Huffman tree from compressed file\r\n    root = file_to_HuffmanTree(compressedFile);\r\n\r\n\r\n\r\n    // Decompress the remaining data\r\n    std::string Bits;\r\n    char c;\r\n    while (compressedFile.get(c)) {\r\n        std::bitset<8> bits(c);\r\n        Bits += bits.to_string();\r\n    }\r\n\r\n\r\n    compressedFile.close();\r\n\r\n    std::string decompressed;\r\n    HuffmanNode *currentNode = root;\r\n\r\n\r\n    for (char bit: Bits) {\r\n        if (bit == '0') {\r\n            currentNode = currentNode->left;\r\n        } else {\r\n            currentNode = currentNode->right;\r\n        }\r\n\r\n        if (!currentNode->left && !currentNode->right) { //leaf node\r\n            decompressed += static_cast<char>(currentNode->data);\r\n            currentNode = root;\r\n        }\r\n    }\r\n\r\n    return decompressed;\r\n}\r\n\r\nstd::pair<int,std::string> Undo_and_redo::undo() {\r\n    if (undo_stack.empty())\r\n        return {2, \"\"};\r\n\r\n    std::pair<int, std::string> p = undo_stack.top();\r\n    undo_stack.pop();\r\n    redo_stack.push(p);\r\n    return p;\r\n}\r\n\r\nstd::pair<int, std::string> Undo_and_redo::redo() {\r\n    if (redo_stack.empty())\r\n        return {2, \"\"};\r\n\r\n    std::pair<int, std::string> p = redo_stack.top();\r\n    redo_stack.pop();\r\n    undo_stack.push(p);\r\n    return p;\r\n}\r\n\r\n// num >> 0 >> input  , num >> 1 >> result\r\nstd::pair<int,std::string> Undo_and_redo::push_to_undo(int num,std::string &s) {\r\n    undo_stack.push({num, s});\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/xmlParser.cpp b/xmlParser.cpp
--- a/xmlParser.cpp	(revision e35708471a73dfbe7ad7b2254a452e4a18a75deb)
+++ b/xmlParser.cpp	(date 1703861012766)
@@ -327,17 +327,17 @@
 HuffmanNode* xmlParser::buildHuffmanTree(std::map<char, int>& frequencies) {
     HuffmanPriorityQueue pq;
 
-    for (auto& pair : frequencies) {
+    for (auto &pair: frequencies) {
         pq.push(new HuffmanNode(pair.first, pair.second));
     }
 
     while (pq.size() > 1) {
-        HuffmanNode* left = pq.top();
+        HuffmanNode *left = pq.top();
         pq.pop();
-        HuffmanNode* right = pq.top();
+        HuffmanNode *right = pq.top();
         pq.pop();
 
-        HuffmanNode* newNode = new HuffmanNode(0, left->frequency + right->frequency);
+        HuffmanNode *newNode = new HuffmanNode(0, left->frequency + right->frequency);
         newNode->left = left;
         newNode->right = right;
 
@@ -383,6 +383,7 @@
         int value;
         inFile.read(reinterpret_cast<char*>(&value), sizeof(char));
 
+        // Since it's a leaf node, frequency is not needed
         return new HuffmanNode(value, 0);
     }
     else {
@@ -391,6 +392,7 @@
     }
 }
 
+
 void xmlParser::HuffmanCodes(HuffmanNode* root, const std::string& code, std::map<char, std::string>& codes) {
     if (!root)
         return;
Index: File.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#include \"File.h\"\r\n\r\n\r\nstd::string File::readFile(std::string path) {\r\n    std::ifstream file(path);\r\n    if (!file.is_open()) {\r\n        std::cerr << \"Error: Unable to open file\" << std::endl;\r\n        return \"\";\r\n    }\r\n    std::string file_string, line;\r\n    while (getline(file, line)) {\r\n        file_string += line + '\\n';\r\n    }\r\n    file.close();\r\n    return file_string;\r\n}\r\n\r\nvoid File::outputFile(std::string address,std::string &content) {\r\n    std::ofstream file(address);\r\n    if (file.is_open()) {\r\n        file << content;\r\n        file.close();\r\n    } else {\r\n        std::cerr << \"Error: Unable to write to file\" << std::endl;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/File.cpp b/File.cpp
--- a/File.cpp	(revision e35708471a73dfbe7ad7b2254a452e4a18a75deb)
+++ b/File.cpp	(date 1703855825916)
@@ -20,6 +20,7 @@
     if (file.is_open()) {
         file << content;
         file.close();
+
     } else {
         std::cerr << "Error: Unable to write to file" << std::endl;
     }
Index: xmlParser.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#pragma once\r\n#include <iostream>\r\n#include <stack>\r\n#include <vector>\r\n#include <queue>\r\n#include <map>\r\n#include \"Node.h\"\r\n#include <fstream>\r\n#include <bitset>\r\n#include <filesystem>\r\n#include <algorithm>\r\nstruct HuffmanNode {\r\n    int data;\r\n    int frequency;\r\n    HuffmanNode* left;\r\n    HuffmanNode* right;\r\n\r\n    HuffmanNode(int data, int freq);\r\n};\r\n\r\nstruct CompareNodes {\r\n    bool operator()(const HuffmanNode* a, const HuffmanNode* b) const;\r\n};\r\n\r\nusing HuffmanPriorityQueue = std::priority_queue<HuffmanNode*, std::vector<HuffmanNode*>, CompareNodes>;\r\n\r\nclass xmlParser {\r\nprivate:\r\n    static int getTagCount(std::string &input_string, std::string &tag_name, int start_index);\r\n\r\n    static void createTree(std::string &xml_input, Node *root);\r\n\r\n    static void createJsonFromTree(Node *root, std::string &json_output, int level, bool is_array);\r\n\r\n    static std::string minifyJson(std::string &xml_input);\r\n\r\n    static int num_of_new_lines(std::string &x);\r\n\r\n    static bool temp_is_dummy(std::string &temp);\r\n\r\n    static bool is_open_tag(std::string &s);\r\n\r\n    static bool is_tag(std::string &s);\r\n\r\n    static bool is_the_same(std::string &open, std::string &closed);\r\n\r\n    static std::pair<std::vector<std::string>,int>  divide_string_for_correction(std::string &file);\r\n\r\n    static std::string get_open_from_closed(std::string &s);\r\n\r\n    static std::string get_closed_from_open(std::string &s);\r\n\r\n    static std::string add_new_lines(std::vector<std::string> &file);\r\n\r\n    static bool is_closed_tag(std::string &s);\r\n\r\n    static std::vector<std::string> values_correction(std::vector<std::string> &file);\r\n\r\n    static HuffmanNode* buildHuffmanTree(std::map<char, int>& frequencies); //to output the compressed file from the tree\r\n    static void HuffmanTree_to_file(HuffmanNode* root, std::ofstream& outFile); //to build the tree from the compressed file\r\n    static HuffmanNode* file_to_HuffmanTree(std::ifstream& inFile);\r\n    static void HuffmanCodes(HuffmanNode* root, const std::string& code, std::map<char, std::string>& codes);\r\n    static std::map<char, int> calculateFrequencies(const std::string& in);\r\npublic:\r\n    xmlParser() = delete;\r\n\r\n    static std::string correct_xml(std::string &xml_file);\r\n\r\n    static std::string get_errors(std::string &xml_file);\r\n\r\n    static std::string minify(std::string& xml_input);\r\n\r\n    static std::string prettify(std::string &xml_input);\r\n\r\n    static std::string toJsonByStrings(std::string &xml_input);\r\n\r\n    static std::string toJsonByTrees(std::string &xml_input);\r\n\r\n    static std::string compress(std::string &input);\r\n\r\n    static std::string decompress(const std::string& compressedFilePath);\r\n};\r\n\r\n\r\nclass Undo_and_redo{\r\npublic:\r\n    static std::pair<int,std::string> undo();\r\n    static std::pair<int,std::string> redo();\r\n    static std::pair<int, std::string> push_to_undo(int num, std::string &s);\r\n};\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/xmlParser.h b/xmlParser.h
--- a/xmlParser.h	(revision e35708471a73dfbe7ad7b2254a452e4a18a75deb)
+++ b/xmlParser.h	(date 1703862328311)
@@ -10,8 +10,8 @@
 #include <filesystem>
 #include <algorithm>
 struct HuffmanNode {
-    int data;
     int frequency;
+    int data;
     HuffmanNode* left;
     HuffmanNode* right;
 
@@ -81,7 +81,6 @@
     static std::string decompress(const std::string& compressedFilePath);
 };
 
-
 class Undo_and_redo{
 public:
     static std::pair<int,std::string> undo();
@@ -92,3 +91,5 @@
 
 
 
+
+
Index: main.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#include \"Network_Analysis.h\"\r\nusing namespace std;\r\nint main() {\r\n    string file = File::readFile(\"E:\\\\College\\\\Data structures\\\\Project\\\\DS_Project\\\\sample.txt\");\r\n    Network_Analysis::graph_and_visualization(file);\r\n    return 0;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.cpp b/main.cpp
--- a/main.cpp	(revision e35708471a73dfbe7ad7b2254a452e4a18a75deb)
+++ b/main.cpp	(date 1703857445218)
@@ -1,7 +1,9 @@
 #include "Network_Analysis.h"
+#include "xmlParser.h"
 using namespace std;
 int main() {
     string file = File::readFile("E:\\College\\Data structures\\Project\\DS_Project\\sample.txt");
-    Network_Analysis::graph_and_visualization(file);
+    cout<<xmlParser::compress(file);
+    cout<<xmlParser::decompress("E:\\College\\Data structures\\Project\\DS_Project\\cmake-build-debug\\compressed_file.bin");
     return 0;
 }
\ No newline at end of file
Index: cmake-build-debug/.ninja_log
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># ninja log v5\r\n11\t1541\t7241118223464176\tCMakeFiles/DS_Project.dir/Post.cpp.obj\tedc1d14d1d0a75ce\r\n21\t1779\t7254762895905773\tCMakeFiles/DS_Project.dir/Error_detection_and_correction.cpp.obj\t6df058640a4242ea\r\n10\t4388\t7254762921990083\tCMakeFiles/DS_Project.dir/Graph.cpp.obj\tfe42040f7808881a\r\n9\t1099\t7241126745873677\tCMakeFiles/DS_Project.dir/Error_detection.cpp.obj\t5bb2a7908508ed85\r\n27\t1605\t7241118224122405\tCMakeFiles/DS_Project.dir/User.cpp.obj\tc732b98dc41045fc\r\n2264\t3435\t7255137691954251\tDS_Project.exe\t7f93c4de3a1e6ef3\r\n4\t2007\t7254769011604587\tCMakeFiles/DS_Project.dir/XML_Parser.cpp.obj\t466b30b67dde9ad4\r\n4\t2263\t7255137680321251\tCMakeFiles/DS_Project.dir/main.cpp.obj\t13340ccce530d375\r\n3\t899\t7254916914291623\tCMakeFiles/DS_Project.dir/huffman.cpp.obj\t4ddcea28c3737d13\r\n1\t205\t7255191164187772\tbuild.ninja\t7fe640fbab316998\r\n4\t4108\t7255123848584803\tCMakeFiles/DS_Project.dir/xmlParser.cpp.obj\t326a05f046e99909\r\n6\t985\t7255114221094692\tCMakeFiles/DS_Project.dir/Node.cpp.obj\t3a26155cf035e35c\r\n10\t605\t7255191449750559\tCMakeFiles/DS_Project.dir/File.cpp.obj\t37a5e67fde0bd4e3\r\n3\t818\t7255191451884857\tCMakeFiles/DS_Project.dir/main.cpp.obj\t13340ccce530d375\r\n7\t1445\t7255191458124363\tCMakeFiles/DS_Project.dir/Network_Analysis.cpp.obj\t33f0d9ecf9fb0d1e\r\n2\t687\t7255192282486277\tCMakeFiles/DS_Project.dir/main.cpp.obj\t13340ccce530d375\r\n7\t1390\t7255192289480847\tCMakeFiles/DS_Project.dir/Network_Analysis.cpp.obj\t33f0d9ecf9fb0d1e\r\n3\t806\t7255193687983708\tCMakeFiles/DS_Project.dir/main.cpp.obj\t13340ccce530d375\r\n6\t1567\t7255193695574995\tCMakeFiles/DS_Project.dir/Network_Analysis.cpp.obj\t33f0d9ecf9fb0d1e\r\n1567\t2432\t7255193704198153\tDS_Project.exe\tdf596deafd31280c\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/cmake-build-debug/.ninja_log b/cmake-build-debug/.ninja_log
--- a/cmake-build-debug/.ninja_log	(revision e35708471a73dfbe7ad7b2254a452e4a18a75deb)
+++ b/cmake-build-debug/.ninja_log	(date 1703858063503)
@@ -19,3 +19,21 @@
 3	806	7255193687983708	CMakeFiles/DS_Project.dir/main.cpp.obj	13340ccce530d375
 6	1567	7255193695574995	CMakeFiles/DS_Project.dir/Network_Analysis.cpp.obj	33f0d9ecf9fb0d1e
 1567	2432	7255193704198153	DS_Project.exe	df596deafd31280c
+18	1483	7255602639479848	CMakeFiles/DS_Project.dir/File.cpp.obj	37a5e67fde0bd4e3
+4	3564	7255602660301689	CMakeFiles/DS_Project.dir/main.cpp.obj	13340ccce530d375
+13	3838	7255602663012206	CMakeFiles/DS_Project.dir/Network_Analysis.cpp.obj	33f0d9ecf9fb0d1e
+9	5562	7255602680230592	CMakeFiles/DS_Project.dir/xmlParser.cpp.obj	326a05f046e99909
+5562	7442	7255602698610362	DS_Project.exe	df596deafd31280c
+4	2452	7255605905948946	CMakeFiles/DS_Project.dir/main.cpp.obj	13340ccce530d375
+9	4159	7255605922981470	CMakeFiles/DS_Project.dir/xmlParser.cpp.obj	326a05f046e99909
+4159	5660	7255605937979797	DS_Project.exe	df596deafd31280c
+4	2158	7255606474287055	CMakeFiles/DS_Project.dir/main.cpp.obj	13340ccce530d375
+2158	3601	7255606488664466	DS_Project.exe	df596deafd31280c
+5	4014	7255608138229046	CMakeFiles/DS_Project.dir/xmlParser.cpp.obj	326a05f046e99909
+4014	5533	7255608153391124	DS_Project.exe	df596deafd31280c
+4	5147	7255609025398195	CMakeFiles/DS_Project.dir/xmlParser.cpp.obj	326a05f046e99909
+5147	6717	7255609041133900	DS_Project.exe	df596deafd31280c
+4	4841	7255609324734317	CMakeFiles/DS_Project.dir/xmlParser.cpp.obj	326a05f046e99909
+4842	6440	7255609340768144	DS_Project.exe	df596deafd31280c
+4	4913	7255612619338713	CMakeFiles/DS_Project.dir/xmlParser.cpp.obj	326a05f046e99909
+4914	6464	7255612634927018	DS_Project.exe	df596deafd31280c
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"CMakePresetLoader\">{\r\n  &quot;useNewFormat&quot;: true\r\n}</component>\r\n  <component name=\"CMakeReloadState\">\r\n    <option name=\"reloaded\" value=\"true\" />\r\n  </component>\r\n  <component name=\"CMakeRunConfigurationManager\">\r\n    <generated>\r\n      <config projectName=\"DS_Project\" targetName=\"DS_Project\" />\r\n    </generated>\r\n  </component>\r\n  <component name=\"CMakeSettings\">\r\n    <configurations>\r\n      <configuration PROFILE_NAME=\"Debug\" ENABLED=\"true\" CONFIG_NAME=\"Debug\" />\r\n    </configurations>\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"cff5e52a-7082-4087-802e-8abf0b082d26\" name=\"Changes\" comment=\"&quot;Added Network Analysis&quot;\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/cmake-build-debug/Testing/Temporary/LastTest.log\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/cmake-build-debug/Testing/Temporary/LastTest.log\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/xmlParser.cpp\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/xmlParser.cpp\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/xmlParser.h\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/xmlParser.h\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"ClangdSettings\">\r\n    <option name=\"formatViaClangd\" value=\"false\" />\r\n  </component>\r\n  <component name=\"ExecutionTargetManager\" SELECTED_TARGET=\"CMakeBuildProfile:Debug\" />\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectApplicationVersion\">\r\n    <option name=\"ide\" value=\"CLion\" />\r\n    <option name=\"majorVersion\" value=\"2022\" />\r\n    <option name=\"minorVersion\" value=\"2.1\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;customColor&quot;: &quot;&quot;,\r\n  &quot;associatedIndex&quot;: 1\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2ZLySC2oSUFIB8S5bIv8sJtfEpS\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.cidr.known.project.marker&quot;: &quot;true&quot;,\r\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\r\n    &quot;cf.first.check.clang-format&quot;: &quot;false&quot;,\r\n    &quot;cidr.known.project.marker&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;main&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;E:/College/Data structures/Project/DS_Project&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.fileTypes&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"DS_Project\" type=\"CMakeRunConfiguration\" factoryName=\"Application\" REDIRECT_INPUT=\"false\" ELEVATE=\"false\" USE_EXTERNAL_CONSOLE=\"false\" PASS_PARENT_ENVS_2=\"true\" PROJECT_NAME=\"DS_Project\" TARGET_NAME=\"DS_Project\" CONFIG_NAME=\"Debug\" RUN_TARGET_PROJECT_NAME=\"DS_Project\" RUN_TARGET_NAME=\"DS_Project\">\r\n      <method v=\"2\">\r\n        <option name=\"com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-python-sdk-67fca87a943a-c986f194a52a-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-233.11799.259\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"cff5e52a-7082-4087-802e-8abf0b082d26\" name=\"Changes\" comment=\"\" />\r\n      <created>1702215651113</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1702215651113</updated>\r\n      <workItem from=\"1702215653058\" duration=\"1242000\" />\r\n      <workItem from=\"1702225232080\" duration=\"851000\" />\r\n      <workItem from=\"1702228161471\" duration=\"1000\" />\r\n      <workItem from=\"1702234694888\" duration=\"1000\" />\r\n      <workItem from=\"1702235239884\" duration=\"12000\" />\r\n      <workItem from=\"1702249118101\" duration=\"749000\" />\r\n      <workItem from=\"1702294678661\" duration=\"13000\" />\r\n      <workItem from=\"1702304920333\" duration=\"2289000\" />\r\n      <workItem from=\"1702330228175\" duration=\"3000\" />\r\n      <workItem from=\"1702331437729\" duration=\"684000\" />\r\n      <workItem from=\"1702392559908\" duration=\"335000\" />\r\n      <workItem from=\"1702406969241\" duration=\"3694000\" />\r\n      <workItem from=\"1702410732658\" duration=\"1068000\" />\r\n      <workItem from=\"1702412175589\" duration=\"630000\" />\r\n      <workItem from=\"1702581624989\" duration=\"3000\" />\r\n      <workItem from=\"1702583558376\" duration=\"17000\" />\r\n      <workItem from=\"1702640386947\" duration=\"20337000\" />\r\n      <workItem from=\"1702666354710\" duration=\"821000\" />\r\n      <workItem from=\"1702670488833\" duration=\"5761000\" />\r\n      <workItem from=\"1702676597257\" duration=\"82000\" />\r\n      <workItem from=\"1702685391174\" duration=\"638000\" />\r\n      <workItem from=\"1702729777229\" duration=\"1380000\" />\r\n      <workItem from=\"1702932132707\" duration=\"1384000\" />\r\n      <workItem from=\"1702933892635\" duration=\"2309000\" />\r\n      <workItem from=\"1702996443970\" duration=\"16000\" />\r\n      <workItem from=\"1703684272523\" duration=\"85000\" />\r\n      <workItem from=\"1703684713124\" duration=\"667000\" />\r\n      <workItem from=\"1703685509200\" duration=\"26000\" />\r\n      <workItem from=\"1703726809754\" duration=\"5980000\" />\r\n      <workItem from=\"1703732939484\" duration=\"20000\" />\r\n      <workItem from=\"1703733145716\" duration=\"1483000\" />\r\n      <workItem from=\"1703734701881\" duration=\"56000\" />\r\n      <workItem from=\"1703763581002\" duration=\"5087000\" />\r\n      <workItem from=\"1703776255247\" duration=\"777000\" />\r\n      <workItem from=\"1703777053775\" duration=\"5728000\" />\r\n      <workItem from=\"1703791457048\" duration=\"12000\" />\r\n      <workItem from=\"1703794687847\" duration=\"4088000\" />\r\n      <workItem from=\"1703801529992\" duration=\"13283000\" />\r\n      <workItem from=\"1703851217576\" duration=\"2198000\" />\r\n      <workItem from=\"1703853460940\" duration=\"4000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"&quot;Added some code for parsing&quot;\">\r\n      <created>1702307517102</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702307517102</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"&quot;Added some code for parsing&quot;\">\r\n      <created>1702392571846</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702392571846</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"&quot;Added some code for parsing&quot;\">\r\n      <created>1702392843903</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702392843903</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"&quot;Added some code for parsing&quot;\">\r\n      <created>1702409071652</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702409071652</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"&quot;Added some code for parsing&quot;\">\r\n      <created>1702409134602</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702409134602</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"&quot;Added some code for parsing&quot;\">\r\n      <created>1702409511624</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702409511624</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"&quot;Added some code for parsing&quot;\">\r\n      <created>1702410947207</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702410947207</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"&quot;Added some code for parsing&quot;\">\r\n      <created>1702410974928</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702410974928</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"&quot;Added some code for parsing&quot;\">\r\n      <created>1702412207176</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702412207176</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"&quot;Added some code for parsing&quot;\">\r\n      <created>1702640401477</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702640401477</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"&quot;Added code for correction&quot;\">\r\n      <created>1702644089876</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702644089876</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"&quot;Added code for correction&quot;\">\r\n      <created>1702644198438</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702644198438</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"&quot;Added code for correction&quot;\">\r\n      <created>1702644440425</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702644440425</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"&quot;Added code for correction&quot;\">\r\n      <created>1702644456104</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702644456104</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"&quot;Added code for correction&quot;\">\r\n      <created>1702649587591</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702649587591</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"&quot;Added code for correction&quot;\">\r\n      <created>1702649765382</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702649765382</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"&quot;Added code for correction&quot;\">\r\n      <created>1702651499809</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702651499809</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00021\" summary=\"&quot;Added code for correction&quot;\">\r\n      <created>1702652845612</created>\r\n      <option name=\"number\" value=\"00021\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702652845612</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00022\" summary=\"&quot;Added code for correction&quot;\">\r\n      <created>1702657854827</created>\r\n      <option name=\"number\" value=\"00022\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702657854827</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00023\" summary=\"&quot;Added code for correction&quot;\">\r\n      <created>1702658269576</created>\r\n      <option name=\"number\" value=\"00023\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00023\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702658269576</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00024\" summary=\"&quot;Added code for correction&quot;\">\r\n      <created>1702658633287</created>\r\n      <option name=\"number\" value=\"00024\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00024\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702658633287</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00025\" summary=\"&quot;Added code for correction&quot;\">\r\n      <created>1702663044739</created>\r\n      <option name=\"number\" value=\"00025\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00025\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702663044739</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00026\" summary=\"&quot;Added code for correction&quot;\">\r\n      <created>1702667171978</created>\r\n      <option name=\"number\" value=\"00026\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00026\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702667171978</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00027\" summary=\"&quot;Added code for correction&quot;\">\r\n      <created>1702674145389</created>\r\n      <option name=\"number\" value=\"00027\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00027\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702674145389</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00028\" summary=\"&quot;Added code for correction&quot;\">\r\n      <created>1702675131554</created>\r\n      <option name=\"number\" value=\"00028\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00028\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702675131554</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00029\" summary=\"&quot;Added code for correction&quot;\">\r\n      <created>1702675534161</created>\r\n      <option name=\"number\" value=\"00029\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00029\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702675534161</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00030\" summary=\"&quot;Added code for correction&quot;\">\r\n      <created>1702676266597</created>\r\n      <option name=\"number\" value=\"00030\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00030\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702676266597</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00031\" summary=\"&quot;Added code for correction&quot;\">\r\n      <created>1702676661730</created>\r\n      <option name=\"number\" value=\"00031\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00031\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702676661730</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00032\" summary=\"&quot;Added code for correction&quot;\">\r\n      <created>1703684305974</created>\r\n      <option name=\"number\" value=\"00032\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00032\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1703684305974</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00033\" summary=\"&quot;Added code for correction&quot;\">\r\n      <created>1703684316442</created>\r\n      <option name=\"number\" value=\"00033\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00033\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1703684316442</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00034\" summary=\"&quot;Added code for correction&quot;\">\r\n      <created>1703685298985</created>\r\n      <option name=\"number\" value=\"00034\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00034\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1703685298985</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00035\" summary=\"&quot;Added code for correction&quot;\">\r\n      <created>1703732526199</created>\r\n      <option name=\"number\" value=\"00035\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00035\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1703732526199</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00036\" summary=\"&quot;Added code for correction&quot;\">\r\n      <created>1703732602658</created>\r\n      <option name=\"number\" value=\"00036\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00036\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1703732602658</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00037\" summary=\"&quot;Added code for correction&quot;\">\r\n      <created>1703732812812</created>\r\n      <option name=\"number\" value=\"00037\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00037\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1703732812812</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00038\" summary=\"&quot;Added code for correction&quot;\">\r\n      <created>1703734627402</created>\r\n      <option name=\"number\" value=\"00038\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00038\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1703734627402</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00039\" summary=\"&quot;Added code for correction&quot;\">\r\n      <created>1703773741451</created>\r\n      <option name=\"number\" value=\"00039\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00039\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1703773741451</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00040\" summary=\"&quot;Added code for correction&quot;\">\r\n      <created>1703774026294</created>\r\n      <option name=\"number\" value=\"00040\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00040\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1703774026294</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00041\" summary=\"&quot;Added code for correction&quot;\">\r\n      <created>1703777006231</created>\r\n      <option name=\"number\" value=\"00041\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00041\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1703777006232</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00042\" summary=\"&quot;Added compression code&quot;\">\r\n      <created>1703777023944</created>\r\n      <option name=\"number\" value=\"00042\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00042\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1703777023944</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00043\" summary=\"&quot;Added compression code&quot;\">\r\n      <created>1703777324332</created>\r\n      <option name=\"number\" value=\"00043\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00043\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1703777324332</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00044\" summary=\"&quot;Added compression code&quot;\">\r\n      <created>1703779311670</created>\r\n      <option name=\"number\" value=\"00044\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00044\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1703779311670</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00045\" summary=\"&quot;Added compression code&quot;\">\r\n      <created>1703787848701</created>\r\n      <option name=\"number\" value=\"00045\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00045\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1703787848701</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00046\" summary=\"&quot;Added compression code&quot;\">\r\n      <created>1703797538018</created>\r\n      <option name=\"number\" value=\"00046\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00046\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1703797538018</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00047\" summary=\"&quot;Added compression code&quot;\">\r\n      <created>1703797620936</created>\r\n      <option name=\"number\" value=\"00047\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00047\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1703797620936</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00048\" summary=\"&quot;Added compression code&quot;\">\r\n      <created>1703804130705</created>\r\n      <option name=\"number\" value=\"00048\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00048\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1703804130705</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00049\" summary=\"&quot;Added compression code&quot;\">\r\n      <created>1703805844723</created>\r\n      <option name=\"number\" value=\"00049\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00049\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1703805844723</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00050\" summary=\"&quot;Added Network Analysis&quot;\">\r\n      <created>1703817364445</created>\r\n      <option name=\"number\" value=\"00050\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00050\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1703817364446</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00051\" summary=\"&quot;Added Network Analysis&quot;\">\r\n      <created>1703817389497</created>\r\n      <option name=\"number\" value=\"00051\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00051\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1703817389497</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00052\" summary=\"&quot;Added Network Analysis&quot;\">\r\n      <created>1703852049815</created>\r\n      <option name=\"number\" value=\"00052\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00052\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1703852049816</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"53\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"&quot;Added cpp files&quot;\" />\r\n    <MESSAGE value=\"&quot;Added some code for parsing&quot;\" />\r\n    <MESSAGE value=\"&quot;Added code for correction&quot;\" />\r\n    <MESSAGE value=\"&quot;Added compression code&quot;\" />\r\n    <MESSAGE value=\"&quot;Added Network Analysis&quot;\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"&quot;Added Network Analysis&quot;\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision e35708471a73dfbe7ad7b2254a452e4a18a75deb)
+++ b/.idea/workspace.xml	(date 1703865442882)
@@ -22,7 +22,17 @@
   <component name="ChangeListManager">
     <list default="true" id="cff5e52a-7082-4087-802e-8abf0b082d26" name="Changes" comment="&quot;Added Network Analysis&quot;">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/File.cpp" beforeDir="false" afterPath="$PROJECT_DIR$/File.cpp" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/cmake-build-debug/.ninja_deps" beforeDir="false" afterPath="$PROJECT_DIR$/cmake-build-debug/.ninja_deps" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/cmake-build-debug/.ninja_log" beforeDir="false" afterPath="$PROJECT_DIR$/cmake-build-debug/.ninja_log" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/DS_Project.dir/File.cpp.obj" beforeDir="false" afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/DS_Project.dir/File.cpp.obj" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/DS_Project.dir/Network_Analysis.cpp.obj" beforeDir="false" afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/DS_Project.dir/Network_Analysis.cpp.obj" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/DS_Project.dir/main.cpp.obj" beforeDir="false" afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/DS_Project.dir/main.cpp.obj" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/DS_Project.dir/xmlParser.cpp.obj" beforeDir="false" afterPath="$PROJECT_DIR$/cmake-build-debug/CMakeFiles/DS_Project.dir/xmlParser.cpp.obj" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/cmake-build-debug/DS_Project.exe" beforeDir="false" afterPath="$PROJECT_DIR$/cmake-build-debug/DS_Project.exe" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/cmake-build-debug/Testing/Temporary/LastTest.log" beforeDir="false" afterPath="$PROJECT_DIR$/cmake-build-debug/Testing/Temporary/LastTest.log" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/cmake-build-debug/compressed_file.bin" beforeDir="false" afterPath="$PROJECT_DIR$/cmake-build-debug/compressed_file.bin" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/main.cpp" beforeDir="false" afterPath="$PROJECT_DIR$/main.cpp" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/xmlParser.cpp" beforeDir="false" afterPath="$PROJECT_DIR$/xmlParser.cpp" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/xmlParser.h" beforeDir="false" afterPath="$PROJECT_DIR$/xmlParser.h" afterDir="false" />
     </list>
@@ -135,14 +145,8 @@
       <workItem from="1703794687847" duration="4088000" />
       <workItem from="1703801529992" duration="13283000" />
       <workItem from="1703851217576" duration="2198000" />
-      <workItem from="1703853460940" duration="4000" />
-    </task>
-    <task id="LOCAL-00004" summary="&quot;Added some code for parsing&quot;">
-      <created>1702307517102</created>
-      <option name="number" value="00004" />
-      <option name="presentableId" value="LOCAL-00004" />
-      <option name="project" value="LOCAL" />
-      <updated>1702307517102</updated>
+      <workItem from="1703853460940" duration="2239000" />
+      <workItem from="1703856929393" duration="6320000" />
     </task>
     <task id="LOCAL-00005" summary="&quot;Added some code for parsing&quot;">
       <created>1702392571846</created>
@@ -480,7 +484,14 @@
       <option name="project" value="LOCAL" />
       <updated>1703852049816</updated>
     </task>
-    <option name="localTasksCounter" value="53" />
+    <task id="LOCAL-00053" summary="&quot;Added Network Analysis&quot;">
+      <created>1703853470443</created>
+      <option name="number" value="00053" />
+      <option name="presentableId" value="LOCAL-00053" />
+      <option name="project" value="LOCAL" />
+      <updated>1703853470443</updated>
+    </task>
+    <option name="localTasksCounter" value="54" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
Index: cmake-build-debug/Testing/Temporary/LastTest.log
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>Start testing: Dec 29 14:37 Egypt Standard Time\r\n----------------------------------------------------------\r\nEnd testing: Dec 29 14:37 Egypt Standard Time\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/cmake-build-debug/Testing/Temporary/LastTest.log b/cmake-build-debug/Testing/Temporary/LastTest.log
--- a/cmake-build-debug/Testing/Temporary/LastTest.log	(revision e35708471a73dfbe7ad7b2254a452e4a18a75deb)
+++ b/cmake-build-debug/Testing/Temporary/LastTest.log	(date 1703858131105)
@@ -1,3 +1,3 @@
-Start testing: Dec 29 14:37 Egypt Standard Time
+Start testing: Dec 29 15:55 Egypt Standard Time
 ----------------------------------------------------------
-End testing: Dec 29 14:37 Egypt Standard Time
+End testing: Dec 29 15:55 Egypt Standard Time
Index: cmake-build-debug/compressed_file.bin
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\u0001\u0000\u0013\u0000\u0000\u0000\u0001\u0000\b\u0000\u0000\u0000\u0001\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0002\u0000\u0000\u0000\u0000y\u0000f\u0001\u0000\u0002\u0000\u0000\u0000\u0000g\u0000o\u0001\u0000\u0004\u0000\u0000\u0000\u0000h\u0001\u0000\u0002\u0000\u0000\u0000\u0000\r\n\u0000i\u0001\u0000\u000B\u0000\u0000\u0000\u0001\u0000\u0005\u0000\u0000\u0000\u0000m\u0000s\u0001\u0000\u0006\u0000\u0000\u0000\u0000 \u0000aGo�z����
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/cmake-build-debug/compressed_file.bin b/cmake-build-debug/compressed_file.bin
--- a/cmake-build-debug/compressed_file.bin	(revision e35708471a73dfbe7ad7b2254a452e4a18a75deb)
+++ b/cmake-build-debug/compressed_file.bin	(date 1703857449214)
@@ -1,2 +1,4 @@
-                 y f     g o     h     
- i         m s       aGo�z����
\ No newline at end of file
+ �   �   <   �    I         b    k   �    > �    t^    -        g     ,        1   �   �   �    en    c �    y    n>        w    x    U              h         2         M     Y  }    m        i�    r    �    d  �$i3���%-	X�s)hFF@8��e��kC:�"M
+�fK(�1�G9n4[YIg3�fQ
+�E�S*��r�L�S,�(��UF���KH
+e32*�V�%H`8��F�$J�l�6I2��6I$���q5�sXֆu*D�\̖Q�c:�r2�h����g(����8�U�)�岙h�Y�Q�Ȫ�K����f6dUD�nJ��q$��ME#N$��FFJ���L�V�ĩJ���&q*F��i#IL�V�ĥ�+tj�h�-��Ql�5�hgR�I����eF3��#-Ƌk),�r��j!����eY��n[)��e�e\��Ա�)i��cfETJ���H�$�I���F�##%H�T�&q�ĩJ���$i3��JZ�V-�F���dd���[�ƴ3�R$���d��#�s���E���s9F`5��Y�2��L�-��E2β��ETjX͔���S1�"�%krT���$l�i�$��FFJ���L�;3�R4�#IH�R
\ No newline at end of file
